!function(){angular.module("app",[])}(),function(){var n=function(n,o,e){n.LCShow=e.getLCShow,o.on("startGame",function(n){console.log("start game")}),o.on("roomDisconnect",function(n){}),n.joinRoom=function(n,e){var t={};t.username=n,t.room=e.toUpperCase(),o.emit("gsmConnect",t)},o.on("message",function(o){console.log("connectie"),"connectionEstablished"==o?(e.setPCShow(!0),e.setLCShow(!1)):"connectionRefused"==o&&(n.text="Something went wrong")})};angular.module("app").controller("loginController",["$scope","socketService","displayService",n])}(),function(){"use strict";var n=function(n,o,e,t,a){n.PCShow=a.getPCShow,n.startGame=!1,n.shoot=function(){};var i=function(n){var o={};o.gamma=n.gamma,o.beta=n.beta,o.alpha=n.alpha,e.emit("deviceOrientation",o)};t.subscribeMe(),o.$on("app.deviceorientationEvent",function(n,o){i(o)}),n.leaveRoom=function(){e.emit("gsmDisconnect",null),a.setLCShow(!0),a.setPCShow(!1)},e.on("message",function(o){"connectionEstablished"==o?(n.text="Waiting on other players",n.startGame=!1):"startGame"==o&&(n.startGame=!0)})};angular.module("app").controller("playController",["$scope","$rootScope","socketService","eventService","displayService",n])}(),function(){var n=function(){var n=!0,o=!1;return{getLCShow:function(){return n},setLCShow:function(o){n=o},getPCShow:function(){return o},setPCShow:function(n){o=n}}};angular.module("app").factory("displayService",[n])}(),function(){var n=function(n,o){function e(){o.addEventListener("deviceorientation",function(o){n.$broadcast("app.deviceorientationEvent",o)})}return{subscribeMe:e}};angular.module("app").factory("eventService",["$rootScope","$window",n])}(),function(){var n=function(n){"use strict";var o=io.connect(window.location.host),e=function(e,t){o.on(e,function(){var e=arguments;n.$apply(function(){t.apply(o,e)})})},t=function(e,t,a){o.emit(e,t,function(){var e=arguments;n.$apply(function(){a&&a.apply(o,e)})})};return{on:e,emit:t,socket:o}};angular.module("app").factory("socketService",["$rootScope",n])}();
//# sourceMappingURL=data:application/json;base64,
