!function(){angular.module("app",[])}(),function(){var e=function(e,n,o){e.LCShow=o.getLCShow,n.on("startGame",function(e){console.log("start game")}),n.on("roomDisconnect",function(e){}),e.joinRoom=function(e,o){var t={};t.username=e,t.room=o.toUpperCase(),n.emit("gsmConnect",t)},n.on("message",function(n){switch(console.log("connectie"),n){case"connectionEstablished":o.setPCShow(!0),o.setLCShow(!1);break;case"connectionRefused":e.text="Something went wrong";break;case"usernameExist":e.text="Username already exist";break;case"roomFull":e.text="Room is already full."}})};angular.module("app").controller("loginController",["$scope","socketService","displayService",e])}(),function(){"use strict";var e=function(e,n,o,t,a){e.PCShow=a.getPCShow,e.startGame=!1,e.shoot=function(){o.emit("playerShot",null)};var i=function(e){var n={};n.beta=e.beta,o.emit("deviceOrientation",n)};t.subscribeMe(),n.$on("app.deviceorientationEvent",function(e,n){i(n)}),e.leaveRoom=function(){o.emit("gsmDisconnect",null),a.setLCShow(!0),a.setPCShow(!1)},o.on("message",function(n){"connectionEstablished"==n?(e.text="Waiting on other players",e.startGame=!1):"startGame"==n&&(e.startGame=!0)})};angular.module("app").controller("playController",["$scope","$rootScope","socketService","eventService","displayService",e])}(),function(){var e=function(){var e=!0,n=!1;return{getLCShow:function(){return e},setLCShow:function(n){e=n},getPCShow:function(){return n},setPCShow:function(e){n=e}}};angular.module("app").factory("displayService",[e])}(),function(){var e=function(e,n){function o(){n.addEventListener("deviceorientation",function(n){e.$broadcast("app.deviceorientationEvent",n)})}return{subscribeMe:o}};angular.module("app").factory("eventService",["$rootScope","$window",e])}(),function(){var e=function(e){"use strict";var n=io.connect(window.location.host),o=function(o,t){n.on(o,function(){var o=arguments;e.$apply(function(){t.apply(n,o)})})},t=function(o,t,a){n.emit(o,t,function(){var o=arguments;e.$apply(function(){a&&a.apply(n,o)})})};return{on:o,emit:t,socket:n}};angular.module("app").factory("socketService",["$rootScope",e])}();
//# sourceMappingURL=data:application/json;base64,
