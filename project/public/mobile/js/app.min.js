!function(){angular.module("app",[])}(),function(){var t=function(){var t=!0,e=!1,n=!1;return{getLCShow:function(){return t},setLCShow:function(e){t=e},getPCShow:function(){return e},setPCShow:function(t){e=t},getSettingShow:function(){return n},setSettingShow:function(t){n=t}}};angular.module("app").factory("displayService",[t])}(),function(){var t=function(t,e){function n(){e.addEventListener("deviceorientation",function(e){t.$broadcast("app.deviceorientationEvent",e)})}return{subscribeMe:n}};angular.module("app").factory("eventService",["$rootScope","$window",t])}(),function(){var t=function(t,e,n){t.LCShow=n.getLCShow,e.on("startGame",function(t){console.log("start game")}),e.on("roomDisconnect",function(t){n.setPCShow(!1),n.setLCShow(!0)}),t.joinRoom=function(t,n){var o={};o.username=t,o.room=n.toUpperCase(),e.emit("gsmConnect",o)},e.on("message",function(e){switch(e){case"connectionEstablished":n.setPCShow(!0),n.setLCShow(!1);break;case"connectionRefused":t.text="Something went wrong";break;case"usernameExist":t.text="Username already exist";break;case"roomFull":t.text="Room is already full."}})};angular.module("app").controller("loginController",["$scope","socketService","displayService",t])}(),function(){"use strict";var t=function(t,e,n,o,i){t.PCShow=i.getPCShow,t.showSettings=i.getSettingShow,t.life=3,t.getNumber=function(t){return new Array(t)},t.startGame=!1,t.Settings=function(){var t=document.getElementsByClassName("btnSettings")[0].children[0];1==t.classList.contains("rotate")?(i.setSettingShow(!1),t.setAttribute("class","rotateAnti")):(i.setSettingShow(!0),t.setAttribute("class","rotate"))},n.on("roomDisconnect",function(e){t.life=3,delete t.color,delete t.text,t.startGame=!1}),t.shoot=function(){n.emit("playerShot",null)};var a=function(t){var e={};e.beta=t.beta,n.emit("deviceOrientation",e)};o.subscribeMe(),e.$on("app.deviceorientationEvent",function(t,e){a(e)}),t.leaveRoom=function(){n.emit("gsmDisconnect",null),i.setLCShow(!0),i.setPCShow(!1),i.setSettingShow(!1)},n.on("message",function(e){console.log(e),"connectionEstablished"==e?(t.text="Waiting on other players",t.startGame=!1):"startGame"==e&&(t.startGame=!0)}),n.on("color",function(e){t.color=e}),n.on("life",function(e){-1==e?(t.text="Game over",t.startGame=!1):t.life=e})};angular.module("app").controller("playController",["$scope","$rootScope","socketService","eventService","displayService",t])}(),function(){var t=function(t){"use strict";var e=io.connect(window.location.host),n=function(n,o){e.on(n,function(){var n=arguments;t.$apply(function(){o.apply(e,n)})})},o=function(n,o,i){e.emit(n,o,function(){var n=arguments;t.$apply(function(){i&&i.apply(e,n)})})};return{on:n,emit:o,socket:e}};angular.module("app").factory("socketService",["$rootScope",t])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNlcnZpY2VzL2Rpc3BsYXlTZXJ2aWNlLmpzIiwic2VydmljZXMvZXZlbnRTZXJ2aWNlLmpzIiwiY29udHJvbGxlci9sb2dpbkNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVyL3BsYXlDb250cm9sbGVyLmpzIiwic2VydmljZXMvc29ja2V0U2VydmljZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiZGlzcGxheVNlcnZpY2UiLCJMQ1Nob3ciLCJQQ1Nob3ciLCJTZXR0aW5nU2hvdyIsImdldExDU2hvdyIsInNldExDU2hvdyIsInZhbHVlIiwiZ2V0UENTaG93Iiwic2V0UENTaG93IiwiZ2V0U2V0dGluZ1Nob3ciLCJzZXRTZXR0aW5nU2hvdyIsImZhY3RvcnkiLCJldmVudFNlcnZpY2UiLCIkcm9vdFNjb3BlIiwiJHdpbmRvdyIsInN1YnNGdW5jIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCIkYnJvYWRjYXN0Iiwic3Vic2NyaWJlTWUiLCJsb2dpbkNvbnRyb2xsZXIiLCIkc2NvcGUiLCJzb2NrZXRTZXJ2aWNlIiwib24iLCJkYXRhIiwiY29uc29sZSIsImxvZyIsImpvaW5Sb29tIiwidXNlcm5hbWUiLCJyb29tIiwidG9VcHBlckNhc2UiLCJlbWl0IiwibWVzc2FnZSIsInRleHQiLCJjb250cm9sbGVyIiwicGxheUNvbnRyb2xsZXIiLCJzaG93U2V0dGluZ3MiLCJsaWZlIiwiZ2V0TnVtYmVyIiwibnVtIiwiQXJyYXkiLCJzdGFydEdhbWUiLCJTZXR0aW5ncyIsImJ0biIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImNoaWxkcmVuIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJzZXRBdHRyaWJ1dGUiLCJjb2xvciIsInNob290Iiwic2VuZERldmljZU9yaWVudGF0aW9uIiwiZXZlbnREYXRhIiwiYmV0YSIsIiRvbiIsImEiLCJiIiwibGVhdmVSb29tIiwic29ja2V0IiwiaW8iLCJjb25uZWN0Iiwid2luZG93IiwibG9jYXRpb24iLCJob3N0IiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJhcmdzIiwiYXJndW1lbnRzIiwiJGFwcGx5IiwiYXBwbHkiXSwibWFwcGluZ3MiOiJDQUdBLFdBRUFBLFFBQUFDLE9BQUEsYUNBQSxXQUNBLEdBQUFDLEdBQUEsV0FFQSxHQUFBQyxJQUFBLEVBRUFDLEdBQUEsRUFFQUMsR0FBQSxDQUVBLFFBQ0FDLFVBQUEsV0FDQSxNQUFBSCxJQUVBSSxVQUFBLFNBQUFDLEdBQ0FMLEVBQUFLLEdBRUFDLFVBQUEsV0FDQSxNQUFBTCxJQUVBTSxVQUFBLFNBQUFGLEdBQ0FKLEVBQUFJLEdBRUFHLGVBQUEsV0FDQSxNQUFBTixJQUVBTyxlQUFBLFNBQUFKLEdBQ0FILEVBQUFHLElBTUFSLFNBQUFDLE9BQUEsT0FBQVksUUFBQSxrQkFBQVgsT0NsQ0EsV0FDQSxHQUFBWSxHQUFBLFNBQUFDLEVBQUFDLEdBQ0EsUUFBQUMsS0FDQUQsRUFBQUUsaUJBQUEsb0JBQUEsU0FBQUMsR0FDQUosRUFBQUssV0FBQSw2QkFBQUQsS0FJQSxPQUNBRSxZQUFBSixHQUdBakIsU0FBQUMsT0FBQSxPQUFBWSxRQUFBLGdCQUFBLGFBQUEsVUFBQUMsT0NWQSxXQUVBLEdBQUFRLEdBQUEsU0FBQUMsRUFBQUMsRUFBQXRCLEdBQ0FxQixFQUFBcEIsT0FBQUQsRUFBQUksVUFFQWtCLEVBQUFDLEdBQUEsWUFBQSxTQUFBQyxHQUNBQyxRQUFBQyxJQUFBLGdCQUVBSixFQUFBQyxHQUFBLGlCQUFBLFNBQUFDLEdBQ0F4QixFQUFBUSxXQUFBLEdBQ0FSLEVBQUFLLFdBQUEsS0FHQWdCLEVBQUFNLFNBQUEsU0FBQUMsRUFBQUMsR0FDQSxHQUFBTCxLQUNBQSxHQUFBSSxTQUFBQSxFQUNBSixFQUFBSyxLQUFBQSxFQUFBQyxjQUNBUixFQUFBUyxLQUFBLGFBQUFQLElBSUFGLEVBQUFDLEdBQUEsVUFBQSxTQUFBUyxHQUNBLE9BQUFBLEdBQ0EsSUFBQSx3QkFDQWhDLEVBQUFRLFdBQUEsR0FDQVIsRUFBQUssV0FBQSxFQUNBLE1BQ0EsS0FBQSxvQkFDQWdCLEVBQUFZLEtBQUEsc0JBQ0EsTUFDQSxLQUFBLGdCQUNBWixFQUFBWSxLQUFBLHdCQUNBLE1BQ0EsS0FBQSxXQUNBWixFQUFBWSxLQUFBLDJCQVFBbkMsU0FBQUMsT0FBQSxPQUFBbUMsV0FBQSxtQkFBQSxTQUFBLGdCQUFBLGlCQUFBZCxPQzFDQSxXQUNBLFlBQ0EsSUFBQWUsR0FBQSxTQUFBZCxFQUFBUixFQUFBUyxFQUFBVixFQUFBWixHQUNBcUIsRUFBQW5CLE9BQUFGLEVBQUFPLFVBQ0FjLEVBQUFlLGFBQUFwQyxFQUFBUyxlQUNBWSxFQUFBZ0IsS0FBQSxFQUNBaEIsRUFBQWlCLFVBQUEsU0FBQUMsR0FDQSxNQUFBLElBQUFDLE9BQUFELElBRUFsQixFQUFBb0IsV0FBQSxFQUNBcEIsRUFBQXFCLFNBQUEsV0FDQSxHQUFBQyxHQUFBQyxTQUFBQyx1QkFBQSxlQUFBLEdBQUFDLFNBQUEsRUFDQSxJQUFBSCxFQUFBSSxVQUFBQyxTQUFBLFdBQ0FoRCxFQUFBVSxnQkFBQSxHQUNBaUMsRUFBQU0sYUFBQSxRQUFBLGdCQUVBakQsRUFBQVUsZ0JBQUEsR0FDQWlDLEVBQUFNLGFBQUEsUUFBQSxZQUtBM0IsRUFBQUMsR0FBQSxpQkFBQSxTQUFBQyxHQUNBSCxFQUFBZ0IsS0FBQSxRQUNBaEIsR0FBQTZCLFlBQ0E3QixHQUFBWSxLQUNBWixFQUFBb0IsV0FBQSxJQUdBcEIsRUFBQThCLE1BQUEsV0FDQTdCLEVBQUFTLEtBQUEsYUFBQSxNQUdBLElBQUFxQixHQUFBLFNBQUFDLEdBQ0EsR0FBQTdCLEtBRUFBLEdBQUE4QixLQUFBRCxFQUFBQyxLQUVBaEMsRUFBQVMsS0FBQSxvQkFBQVAsR0FFQVosR0FBQU8sY0FDQU4sRUFBQTBDLElBQUEsNkJBQUEsU0FBQUMsRUFBQUMsR0FDQUwsRUFBQUssS0FHQXBDLEVBQUFxQyxVQUFBLFdBQ0FwQyxFQUFBUyxLQUFBLGdCQUFBLE1BQ0EvQixFQUFBSyxXQUFBLEdBQ0FMLEVBQUFRLFdBQUEsR0FDQVIsRUFBQVUsZ0JBQUEsSUFHQVksRUFBQUMsR0FBQSxVQUFBLFNBQUFTLEdBQ0FQLFFBQUFDLElBQUFNLEdBQ0EseUJBQUFBLEdBQ0FYLEVBQUFZLEtBQUEsMkJBQ0FaLEVBQUFvQixXQUFBLEdBQ0EsYUFBQVQsSUFDQVgsRUFBQW9CLFdBQUEsS0FJQW5CLEVBQUFDLEdBQUEsUUFBQSxTQUFBQyxHQUNBSCxFQUFBNkIsTUFBQTFCLElBR0FGLEVBQUFDLEdBQUEsT0FBQSxTQUFBQyxHQUNBLElBQUFBLEdBQ0FILEVBQUFZLEtBQUEsWUFDQVosRUFBQW9CLFdBQUEsR0FFQXBCLEVBQUFnQixLQUFBYixJQU1BMUIsU0FBQUMsT0FBQSxPQUFBbUMsV0FBQSxrQkFBQSxTQUFBLGFBQUEsZ0JBQUEsZUFBQSxpQkFBQUMsT0M5RUEsV0FFQSxHQUFBYixHQUFBLFNBQUFULEdBQ0EsWUFFQSxJQUFBOEMsR0FBQUMsR0FBQUMsUUFBQUMsT0FBQUMsU0FBQUMsTUFFQXpDLEVBQUEsU0FBQTBDLEVBQUFDLEdBQ0FQLEVBQUFwQyxHQUFBMEMsRUFBQSxXQUNBLEdBQUFFLEdBQUFDLFNBQ0F2RCxHQUFBd0QsT0FBQSxXQUNBSCxFQUFBSSxNQUFBWCxFQUFBUSxRQUtBcEMsRUFBQSxTQUFBa0MsRUFBQXpDLEVBQUEwQyxHQUNBUCxFQUFBNUIsS0FBQWtDLEVBQUF6QyxFQUFBLFdBQ0EsR0FBQTJDLEdBQUFDLFNBQ0F2RCxHQUFBd0QsT0FBQSxXQUNBSCxHQUNBQSxFQUFBSSxNQUFBWCxFQUFBUSxPQU9BLFFBQ0E1QyxHQUFBQSxFQUNBUSxLQUFBQSxFQUNBNEIsT0FBQUEsR0FJQTdELFNBQUFDLE9BQUEsT0FBQVksUUFBQSxpQkFBQSxhQUFBVyIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IE1pY2hpZWwgb24gMjUvMTEvMjAxNS5cbiAqL1xuKGZ1bmN0aW9uKCl7XG5cbiAgICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoXCJhcHBcIixbXSk7XG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGp1c3Rpam5kZXBvdmVyIG9uIDE2LzEyLzE1LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuICAgIHZhciBkaXNwbGF5U2VydmljZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgLy9Mb2dpbiBDb250cm9sbGVyXHJcbiAgICAgICAgdmFyIExDU2hvdyA9IHRydWU7XHJcbiAgICAgICAgLy9QbGF5IGNvbnRyb2xsZXJcclxuICAgICAgICB2YXIgUENTaG93ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHZhciBTZXR0aW5nU2hvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm57XHJcbiAgICAgICAgICAgIGdldExDU2hvdzogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBMQ1Nob3c7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldExDU2hvdzogZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgTENTaG93ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFBDU2hvdzogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQQ1Nob3c7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldFBDU2hvdzogZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgUENTaG93ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFNldHRpbmdTaG93OiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdTaG93O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRTZXR0aW5nU2hvdzogZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgU2V0dGluZ1Nob3cgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdkaXNwbGF5U2VydmljZScsIFtkaXNwbGF5U2VydmljZV0pO1xyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IE1pY2hpZWwgb24gMTYvMTIvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG4gICAgdmFyIGV2ZW50U2VydmljZSA9IGZ1bmN0aW9uKCRyb290U2NvcGUsJHdpbmRvdyl7XHJcbiAgICAgICAgZnVuY3Rpb24gc3Vic0Z1bmMoKSB7XHJcbiAgICAgICAgICAgICR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlb3JpZW50YXRpb24nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2FwcC5kZXZpY2VvcmllbnRhdGlvbkV2ZW50JywgZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBcInN1YnNjcmliZU1lXCI6IHN1YnNGdW5jXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJldmVudFNlcnZpY2VcIiwgW1wiJHJvb3RTY29wZVwiLFwiJHdpbmRvd1wiLCBldmVudFNlcnZpY2VdKTtcclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBqdXN0aWpuZGVwb3ZlciBvbiAxNi8xMi8xNS5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgdmFyIGxvZ2luQ29udHJvbGxlciA9IGZ1bmN0aW9uKCRzY29wZSwgc29ja2V0U2VydmljZSwgZGlzcGxheVNlcnZpY2Upe1xyXG4gICAgICAgICRzY29wZS5MQ1Nob3cgPSBkaXNwbGF5U2VydmljZS5nZXRMQ1Nob3c7XHJcbiAgICAgICAgLy9mdW5jdGlvbnNcclxuICAgICAgICBzb2NrZXRTZXJ2aWNlLm9uKFwic3RhcnRHYW1lXCIsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RhcnQgZ2FtZVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzb2NrZXRTZXJ2aWNlLm9uKFwicm9vbURpc2Nvbm5lY3RcIiwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgZGlzcGxheVNlcnZpY2Uuc2V0UENTaG93KGZhbHNlKTtcclxuICAgICAgICAgICAgZGlzcGxheVNlcnZpY2Uuc2V0TENTaG93KHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkc2NvcGUuam9pblJvb20gPSBmdW5jdGlvbih1c2VybmFtZSwgcm9vbSl7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0ge307XHJcbiAgICAgICAgICAgIGRhdGEudXNlcm5hbWUgPSB1c2VybmFtZTtcclxuICAgICAgICAgICAgZGF0YS5yb29tID0gcm9vbS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICBzb2NrZXRTZXJ2aWNlLmVtaXQoXCJnc21Db25uZWN0XCIsIGRhdGEpO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzb2NrZXRTZXJ2aWNlLm9uKFwibWVzc2FnZVwiLCBmdW5jdGlvbihtZXNzYWdlKXtcclxuICAgICAgICAgICAgc3dpdGNoKG1lc3NhZ2Upe1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbm5lY3Rpb25Fc3RhYmxpc2hlZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlTZXJ2aWNlLnNldFBDU2hvdyh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5U2VydmljZS5zZXRMQ1Nob3coZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbm5lY3Rpb25SZWZ1c2VkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSBcIlNvbWV0aGluZyB3ZW50IHdyb25nXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidXNlcm5hbWVFeGlzdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gXCJVc2VybmFtZSBhbHJlYWR5IGV4aXN0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicm9vbUZ1bGxcIiA6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSBcIlJvb20gaXMgYWxyZWFkeSBmdWxsLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdCA6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImxvZ2luQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCJzb2NrZXRTZXJ2aWNlXCIsIFwiZGlzcGxheVNlcnZpY2VcIiwgbG9naW5Db250cm9sbGVyXSk7XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkganVzdGlqbmRlcG92ZXIgb24gMTYvMTIvMTUuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbigpe1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgcGxheUNvbnRyb2xsZXIgPSBmdW5jdGlvbigkc2NvcGUsICRyb290U2NvcGUsIHNvY2tldFNlcnZpY2UsIGV2ZW50U2VydmljZSwgZGlzcGxheVNlcnZpY2Upe1xyXG4gICAgICAgICRzY29wZS5QQ1Nob3cgPSBkaXNwbGF5U2VydmljZS5nZXRQQ1Nob3c7XHJcbiAgICAgICAgJHNjb3BlLnNob3dTZXR0aW5ncyA9IGRpc3BsYXlTZXJ2aWNlLmdldFNldHRpbmdTaG93O1xyXG4gICAgICAgICRzY29wZS5saWZlPTM7XHJcbiAgICAgICAgJHNjb3BlLmdldE51bWJlciA9IGZ1bmN0aW9uKG51bSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5KG51bSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuc3RhcnRHYW1lID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLlNldHRpbmdzID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyIGJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2J0blNldHRpbmdzJylbMF0uY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgIGlmKGJ0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3JvdGF0ZScpPT10cnVlKXtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlTZXJ2aWNlLnNldFNldHRpbmdTaG93KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3JvdGF0ZUFudGknKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5U2VydmljZS5zZXRTZXR0aW5nU2hvdyh0cnVlKTtcclxuICAgICAgICAgICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3JvdGF0ZScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNvY2tldFNlcnZpY2Uub24oXCJyb29tRGlzY29ubmVjdFwiLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAkc2NvcGUubGlmZT0zO1xyXG4gICAgICAgICAgICBkZWxldGUgJHNjb3BlLmNvbG9yO1xyXG4gICAgICAgICAgICBkZWxldGUgJHNjb3BlLnRleHQ7XHJcbiAgICAgICAgICAgICRzY29wZS5zdGFydEdhbWU9ZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRzY29wZS5zaG9vdCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNvY2tldFNlcnZpY2UuZW1pdChcInBsYXllclNob3RcIiwgbnVsbCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHNlbmREZXZpY2VPcmllbnRhdGlvbiA9IGZ1bmN0aW9uKGV2ZW50RGF0YSl7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0ge307XHJcbiAgICAgICAgICAgIC8vZGF0YS5nYW1tYSA9IGV2ZW50RGF0YS5nYW1tYTtcclxuICAgICAgICAgICAgZGF0YS5iZXRhID0gZXZlbnREYXRhLmJldGE7XHJcbiAgICAgICAgICAgIC8vZGF0YS5hbHBoYSA9IGV2ZW50RGF0YS5hbHBoYTtcclxuICAgICAgICAgICAgc29ja2V0U2VydmljZS5lbWl0KFwiZGV2aWNlT3JpZW50YXRpb25cIiwgZGF0YSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGV2ZW50U2VydmljZS5zdWJzY3JpYmVNZSgpO1xyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCdhcHAuZGV2aWNlb3JpZW50YXRpb25FdmVudCcsIGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgc2VuZERldmljZU9yaWVudGF0aW9uKGIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkc2NvcGUubGVhdmVSb29tID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgc29ja2V0U2VydmljZS5lbWl0KFwiZ3NtRGlzY29ubmVjdFwiLCBudWxsKTtcclxuICAgICAgICAgICAgZGlzcGxheVNlcnZpY2Uuc2V0TENTaG93KHRydWUpO1xyXG4gICAgICAgICAgICBkaXNwbGF5U2VydmljZS5zZXRQQ1Nob3coZmFsc2UpO1xyXG4gICAgICAgICAgICBkaXNwbGF5U2VydmljZS5zZXRTZXR0aW5nU2hvdyhmYWxzZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc29ja2V0U2VydmljZS5vbihcIm1lc3NhZ2VcIiwgZnVuY3Rpb24obWVzc2FnZSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBpZihtZXNzYWdlID09IFwiY29ubmVjdGlvbkVzdGFibGlzaGVkXCIpe1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSBcIldhaXRpbmcgb24gb3RoZXIgcGxheWVyc1wiO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXJ0R2FtZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9ZWxzZSBpZihtZXNzYWdlID09IFwic3RhcnRHYW1lXCIpe1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXJ0R2FtZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc29ja2V0U2VydmljZS5vbihcImNvbG9yXCIsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jb2xvcj1kYXRhO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzb2NrZXRTZXJ2aWNlLm9uKFwibGlmZVwiLGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICBpZihkYXRhPT0tMSl7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9IFwiR2FtZSBvdmVyXCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhcnRHYW1lPWZhbHNlO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICRzY29wZS5saWZlID0gZGF0YTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcInBsYXlDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcIiRyb290U2NvcGVcIiwgXCJzb2NrZXRTZXJ2aWNlXCIsIFwiZXZlbnRTZXJ2aWNlXCIsIFwiZGlzcGxheVNlcnZpY2VcIiwgcGxheUNvbnRyb2xsZXJdKVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGp1c3Rpam5kZXBvdmVyIG9uIDA5LzEyLzE1LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgIHZhciBzb2NrZXRTZXJ2aWNlID0gZnVuY3Rpb24oJHJvb3RTY29wZSl7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgLy9wcml2YXRlXHJcbiAgICAgICAgdmFyIHNvY2tldCA9IGlvLmNvbm5lY3Qod2luZG93LmxvY2F0aW9uLmhvc3QpO1xyXG4gICAgICAgIC8vZnVuY3Rpb25zXHJcbiAgICAgICAgdmFyIG9uID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgc29ja2V0Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoc29ja2V0LCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZW1pdCA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KGV2ZW50TmFtZSwgZGF0YSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHNvY2tldCwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWNcclxuICAgICAgICByZXR1cm57XHJcbiAgICAgICAgICAgIG9uOiBvbixcclxuICAgICAgICAgICAgZW1pdDogZW1pdCxcclxuICAgICAgICAgICAgc29ja2V0OiBzb2NrZXRcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJzb2NrZXRTZXJ2aWNlXCIsIFtcIiRyb290U2NvcGVcIiwgc29ja2V0U2VydmljZV0pO1xyXG5cclxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
