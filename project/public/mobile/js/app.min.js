!function(){angular.module("app",[])}(),function(){var t=function(t,e,n){t.LCShow=n.getLCShow,e.on("startGame",function(t){console.log("start game")}),e.on("roomDisconnect",function(t){n.setPCShow(!1),n.setLCShow(!0)}),t.joinRoom=function(t,n){var o={};o.username=t,o.room=n.toUpperCase(),e.emit("gsmConnect",o)},e.on("message",function(e){switch(e){case"connectionEstablished":n.setPCShow(!0),n.setLCShow(!1);break;case"connectionRefused":t.text="Something went wrong";break;case"usernameExist":t.text="Username already exist";break;case"roomFull":t.text="Room is already full."}})};angular.module("app").controller("loginController",["$scope","socketService","displayService",t])}(),function(){"use strict";var t=function(t,e,n,o,i){t.PCShow=i.getPCShow,t.showSettings=i.getSettingShow,t.startGame=!1,t.Settings=function(){var t=document.getElementsByClassName("btnSettings")[0].children[0];1==t.classList.contains("rotate")?(i.setSettingShow(!1),t.setAttribute("class","rotateAnti")):(i.setSettingShow(!0),t.setAttribute("class","rotate"))},t.shoot=function(){n.emit("playerShot",null)};var a=function(t){var e={};e.beta=t.beta,n.emit("deviceOrientation",e)};o.subscribeMe(),e.$on("app.deviceorientationEvent",function(t,e){a(e)}),t.leaveRoom=function(){n.emit("gsmDisconnect",null),i.setLCShow(!0),i.setPCShow(!1),i.setSettingShow(!1)},n.on("message",function(e){console.log(e),"connectionEstablished"==e?(t.text="Waiting on other players",t.startGame=!1):"startGame"==e&&(t.startGame=!0)})};angular.module("app").controller("playController",["$scope","$rootScope","socketService","eventService","displayService",t])}(),function(){var t=function(){var t=!0,e=!1,n=!1;return{getLCShow:function(){return t},setLCShow:function(e){t=e},getPCShow:function(){return e},setPCShow:function(t){e=t},getSettingShow:function(){return n},setSettingShow:function(t){n=t}}};angular.module("app").factory("displayService",[t])}(),function(){var t=function(t,e){function n(){e.addEventListener("deviceorientation",function(e){t.$broadcast("app.deviceorientationEvent",e)})}return{subscribeMe:n}};angular.module("app").factory("eventService",["$rootScope","$window",t])}(),function(){var t=function(t){"use strict";var e=io.connect(window.location.host),n=function(n,o){e.on(n,function(){var n=arguments;t.$apply(function(){o.apply(e,n)})})},o=function(n,o,i){e.emit(n,o,function(){var n=arguments;t.$apply(function(){i&&i.apply(e,n)})})};return{on:n,emit:o,socket:e}};angular.module("app").factory("socketService",["$rootScope",t])}();
//# sourceMappingURL=data:application/json;base64,
