!function(){angular.module("app",[])}(),function(){var t=function(t,e,n){t.LCShow=n.getLCShow,e.on("startGame",function(t){console.log("start game")}),e.on("roomDisconnect",function(t){n.setPCShow(!1),n.setLCShow(!0)}),t.joinRoom=function(t,n){var o={};o.username=t,o.room=n.toUpperCase(),e.emit("gsmConnect",o)},e.on("message",function(e){switch(e){case"connectionEstablished":n.setPCShow(!0),n.setLCShow(!1);break;case"connectionRefused":t.text="Something went wrong";break;case"usernameExist":t.text="Username already exist";break;case"roomFull":t.text="Room is already full."}})};angular.module("app").controller("loginController",["$scope","socketService","displayService",t])}(),function(){"use strict";var t=function(t,e,n,o,i){t.PCShow=i.getPCShow,t.showSettings=i.getSettingShow,t.life=3,t.getNumber=function(t){return new Array(t)},t.color="blue",t.startGame=!1,t.Settings=function(){var t=document.getElementsByClassName("btnSettings")[0].children[0];1==t.classList.contains("rotate")?(i.setSettingShow(!1),t.setAttribute("class","rotateAnti")):(i.setSettingShow(!0),t.setAttribute("class","rotate"))},t.shoot=function(){n.emit("playerShot",null)};var a=function(t){var e={};e.beta=t.beta,n.emit("deviceOrientation",e)};o.subscribeMe(),e.$on("app.deviceorientationEvent",function(t,e){a(e)}),t.leaveRoom=function(){n.emit("gsmDisconnect",null),i.setLCShow(!0),i.setPCShow(!1),i.setSettingShow(!1)},n.on("message",function(e){console.log(e),"connectionEstablished"==e?(t.text="Waiting on other players",t.startGame=!1):"startGame"==e&&(t.startGame=!0)}),n.on("life",function(e){-1==e?(t.text="Game over",t.startGame=!1):t.life=e})};angular.module("app").controller("playController",["$scope","$rootScope","socketService","eventService","displayService",t])}(),function(){var t=function(){var t=!0,e=!1,n=!1;return{getLCShow:function(){return t},setLCShow:function(e){t=e},getPCShow:function(){return e},setPCShow:function(t){e=t},getSettingShow:function(){return n},setSettingShow:function(t){n=t}}};angular.module("app").factory("displayService",[t])}(),function(){var t=function(t,e){function n(){e.addEventListener("deviceorientation",function(e){t.$broadcast("app.deviceorientationEvent",e)})}return{subscribeMe:n}};angular.module("app").factory("eventService",["$rootScope","$window",t])}(),function(){var t=function(t){"use strict";var e=io.connect(window.location.host),n=function(n,o){e.on(n,function(){var n=arguments;t.$apply(function(){o.apply(e,n)})})},o=function(n,o,i){e.emit(n,o,function(){var n=arguments;t.$apply(function(){i&&i.apply(e,n)})})};return{on:n,emit:o,socket:e}};angular.module("app").factory("socketService",["$rootScope",t])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXIvbG9naW5Db250cm9sbGVyLmpzIiwiY29udHJvbGxlci9wbGF5Q29udHJvbGxlci5qcyIsInNlcnZpY2VzL2Rpc3BsYXlTZXJ2aWNlLmpzIiwic2VydmljZXMvZXZlbnRTZXJ2aWNlLmpzIiwic2VydmljZXMvc29ja2V0U2VydmljZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwibG9naW5Db250cm9sbGVyIiwiJHNjb3BlIiwic29ja2V0U2VydmljZSIsImRpc3BsYXlTZXJ2aWNlIiwiTENTaG93IiwiZ2V0TENTaG93Iiwib24iLCJkYXRhIiwiY29uc29sZSIsImxvZyIsInNldFBDU2hvdyIsInNldExDU2hvdyIsImpvaW5Sb29tIiwidXNlcm5hbWUiLCJyb29tIiwidG9VcHBlckNhc2UiLCJlbWl0IiwibWVzc2FnZSIsInRleHQiLCJjb250cm9sbGVyIiwicGxheUNvbnRyb2xsZXIiLCIkcm9vdFNjb3BlIiwiZXZlbnRTZXJ2aWNlIiwiUENTaG93IiwiZ2V0UENTaG93Iiwic2hvd1NldHRpbmdzIiwiZ2V0U2V0dGluZ1Nob3ciLCJsaWZlIiwiZ2V0TnVtYmVyIiwibnVtIiwiQXJyYXkiLCJjb2xvciIsInN0YXJ0R2FtZSIsIlNldHRpbmdzIiwiYnRuIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInNldFNldHRpbmdTaG93Iiwic2V0QXR0cmlidXRlIiwic2hvb3QiLCJzZW5kRGV2aWNlT3JpZW50YXRpb24iLCJldmVudERhdGEiLCJiZXRhIiwic3Vic2NyaWJlTWUiLCIkb24iLCJhIiwiYiIsImxlYXZlUm9vbSIsIlNldHRpbmdTaG93IiwidmFsdWUiLCJmYWN0b3J5IiwiJHdpbmRvdyIsInN1YnNGdW5jIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCIkYnJvYWRjYXN0Iiwic29ja2V0IiwiaW8iLCJjb25uZWN0Iiwid2luZG93IiwibG9jYXRpb24iLCJob3N0IiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJhcmdzIiwiYXJndW1lbnRzIiwiJGFwcGx5IiwiYXBwbHkiXSwibWFwcGluZ3MiOiJDQUdBLFdBRUFBLFFBQUFDLE9BQUEsYUNBQSxXQUVBLEdBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQUYsRUFBQUcsT0FBQUQsRUFBQUUsVUFFQUgsRUFBQUksR0FBQSxZQUFBLFNBQUFDLEdBQ0FDLFFBQUFDLElBQUEsZ0JBRUFQLEVBQUFJLEdBQUEsaUJBQUEsU0FBQUMsR0FDQUosRUFBQU8sV0FBQSxHQUNBUCxFQUFBUSxXQUFBLEtBR0FWLEVBQUFXLFNBQUEsU0FBQUMsRUFBQUMsR0FDQSxHQUFBUCxLQUNBQSxHQUFBTSxTQUFBQSxFQUNBTixFQUFBTyxLQUFBQSxFQUFBQyxjQUNBYixFQUFBYyxLQUFBLGFBQUFULElBSUFMLEVBQUFJLEdBQUEsVUFBQSxTQUFBVyxHQUNBLE9BQUFBLEdBQ0EsSUFBQSx3QkFDQWQsRUFBQU8sV0FBQSxHQUNBUCxFQUFBUSxXQUFBLEVBQ0EsTUFDQSxLQUFBLG9CQUNBVixFQUFBaUIsS0FBQSxzQkFDQSxNQUNBLEtBQUEsZ0JBQ0FqQixFQUFBaUIsS0FBQSx3QkFDQSxNQUNBLEtBQUEsV0FDQWpCLEVBQUFpQixLQUFBLDJCQVFBcEIsU0FBQUMsT0FBQSxPQUFBb0IsV0FBQSxtQkFBQSxTQUFBLGdCQUFBLGlCQUFBbkIsT0MxQ0EsV0FDQSxZQUNBLElBQUFvQixHQUFBLFNBQUFuQixFQUFBb0IsRUFBQW5CLEVBQUFvQixFQUFBbkIsR0FDQUYsRUFBQXNCLE9BQUFwQixFQUFBcUIsVUFDQXZCLEVBQUF3QixhQUFBdEIsRUFBQXVCLGVBQ0F6QixFQUFBMEIsS0FBQSxFQUNBMUIsRUFBQTJCLFVBQUEsU0FBQUMsR0FDQSxNQUFBLElBQUFDLE9BQUFELElBRUE1QixFQUFBOEIsTUFBQSxPQUNBOUIsRUFBQStCLFdBQUEsRUFDQS9CLEVBQUFnQyxTQUFBLFdBQ0EsR0FBQUMsR0FBQUMsU0FBQUMsdUJBQUEsZUFBQSxHQUFBQyxTQUFBLEVBQ0EsSUFBQUgsRUFBQUksVUFBQUMsU0FBQSxXQUNBcEMsRUFBQXFDLGdCQUFBLEdBQ0FOLEVBQUFPLGFBQUEsUUFBQSxnQkFFQXRDLEVBQUFxQyxnQkFBQSxHQUNBTixFQUFBTyxhQUFBLFFBQUEsWUFJQXhDLEVBQUF5QyxNQUFBLFdBQ0F4QyxFQUFBYyxLQUFBLGFBQUEsTUFHQSxJQUFBMkIsR0FBQSxTQUFBQyxHQUNBLEdBQUFyQyxLQUVBQSxHQUFBc0MsS0FBQUQsRUFBQUMsS0FFQTNDLEVBQUFjLEtBQUEsb0JBQUFULEdBRUFlLEdBQUF3QixjQUNBekIsRUFBQTBCLElBQUEsNkJBQUEsU0FBQUMsRUFBQUMsR0FDQU4sRUFBQU0sS0FHQWhELEVBQUFpRCxVQUFBLFdBQ0FoRCxFQUFBYyxLQUFBLGdCQUFBLE1BQ0FiLEVBQUFRLFdBQUEsR0FDQVIsRUFBQU8sV0FBQSxHQUNBUCxFQUFBcUMsZ0JBQUEsSUFHQXRDLEVBQUFJLEdBQUEsVUFBQSxTQUFBVyxHQUNBVCxRQUFBQyxJQUFBUSxHQUNBLHlCQUFBQSxHQUNBaEIsRUFBQWlCLEtBQUEsMkJBQ0FqQixFQUFBK0IsV0FBQSxHQUNBLGFBQUFmLElBQ0FoQixFQUFBK0IsV0FBQSxLQUlBOUIsRUFBQUksR0FBQSxPQUFBLFNBQUFDLEdBQ0EsSUFBQUEsR0FDQU4sRUFBQWlCLEtBQUEsWUFDQWpCLEVBQUErQixXQUFBLEdBRUEvQixFQUFBMEIsS0FBQXBCLElBTUFULFNBQUFDLE9BQUEsT0FBQW9CLFdBQUEsa0JBQUEsU0FBQSxhQUFBLGdCQUFBLGVBQUEsaUJBQUFDLE9DbEVBLFdBQ0EsR0FBQWpCLEdBQUEsV0FFQSxHQUFBQyxJQUFBLEVBRUFtQixHQUFBLEVBRUE0QixHQUFBLENBRUEsUUFDQTlDLFVBQUEsV0FDQSxNQUFBRCxJQUVBTyxVQUFBLFNBQUF5QyxHQUNBaEQsRUFBQWdELEdBRUE1QixVQUFBLFdBQ0EsTUFBQUQsSUFFQWIsVUFBQSxTQUFBMEMsR0FDQTdCLEVBQUE2QixHQUVBMUIsZUFBQSxXQUNBLE1BQUF5QixJQUVBWCxlQUFBLFNBQUFZLEdBQ0FELEVBQUFDLElBTUF0RCxTQUFBQyxPQUFBLE9BQUFzRCxRQUFBLGtCQUFBbEQsT0NsQ0EsV0FDQSxHQUFBbUIsR0FBQSxTQUFBRCxFQUFBaUMsR0FDQSxRQUFBQyxLQUNBRCxFQUFBRSxpQkFBQSxvQkFBQSxTQUFBQyxHQUNBcEMsRUFBQXFDLFdBQUEsNkJBQUFELEtBSUEsT0FDQVgsWUFBQVMsR0FHQXpELFNBQUFDLE9BQUEsT0FBQXNELFFBQUEsZ0JBQUEsYUFBQSxVQUFBL0IsT0NYQSxXQUVBLEdBQUFwQixHQUFBLFNBQUFtQixHQUNBLFlBRUEsSUFBQXNDLEdBQUFDLEdBQUFDLFFBQUFDLE9BQUFDLFNBQUFDLE1BRUExRCxFQUFBLFNBQUEyRCxFQUFBQyxHQUNBUCxFQUFBckQsR0FBQTJELEVBQUEsV0FDQSxHQUFBRSxHQUFBQyxTQUNBL0MsR0FBQWdELE9BQUEsV0FDQUgsRUFBQUksTUFBQVgsRUFBQVEsUUFLQW5ELEVBQUEsU0FBQWlELEVBQUExRCxFQUFBMkQsR0FDQVAsRUFBQTNDLEtBQUFpRCxFQUFBMUQsRUFBQSxXQUNBLEdBQUE0RCxHQUFBQyxTQUNBL0MsR0FBQWdELE9BQUEsV0FDQUgsR0FDQUEsRUFBQUksTUFBQVgsRUFBQVEsT0FPQSxRQUNBN0QsR0FBQUEsRUFDQVUsS0FBQUEsRUFDQTJDLE9BQUFBLEdBSUE3RCxTQUFBQyxPQUFBLE9BQUFzRCxRQUFBLGlCQUFBLGFBQUFuRCIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IE1pY2hpZWwgb24gMjUvMTEvMjAxNS5cbiAqL1xuKGZ1bmN0aW9uKCl7XG5cbiAgICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoXCJhcHBcIixbXSk7XG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGp1c3Rpam5kZXBvdmVyIG9uIDE2LzEyLzE1LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICB2YXIgbG9naW5Db250cm9sbGVyID0gZnVuY3Rpb24oJHNjb3BlLCBzb2NrZXRTZXJ2aWNlLCBkaXNwbGF5U2VydmljZSl7XHJcbiAgICAgICAgJHNjb3BlLkxDU2hvdyA9IGRpc3BsYXlTZXJ2aWNlLmdldExDU2hvdztcclxuICAgICAgICAvL2Z1bmN0aW9uc1xyXG4gICAgICAgIHNvY2tldFNlcnZpY2Uub24oXCJzdGFydEdhbWVcIiwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdGFydCBnYW1lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNvY2tldFNlcnZpY2Uub24oXCJyb29tRGlzY29ubmVjdFwiLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBkaXNwbGF5U2VydmljZS5zZXRQQ1Nob3coZmFsc2UpO1xyXG4gICAgICAgICAgICBkaXNwbGF5U2VydmljZS5zZXRMQ1Nob3codHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRzY29wZS5qb2luUm9vbSA9IGZ1bmN0aW9uKHVzZXJuYW1lLCByb29tKXtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgZGF0YS51c2VybmFtZSA9IHVzZXJuYW1lO1xyXG4gICAgICAgICAgICBkYXRhLnJvb20gPSByb29tLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIHNvY2tldFNlcnZpY2UuZW1pdChcImdzbUNvbm5lY3RcIiwgZGF0YSk7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNvY2tldFNlcnZpY2Uub24oXCJtZXNzYWdlXCIsIGZ1bmN0aW9uKG1lc3NhZ2Upe1xyXG4gICAgICAgICAgICBzd2l0Y2gobWVzc2FnZSl7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29ubmVjdGlvbkVzdGFibGlzaGVkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheVNlcnZpY2Uuc2V0UENTaG93KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlTZXJ2aWNlLnNldExDU2hvdyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29ubmVjdGlvblJlZnVzZWRcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9IFwiU29tZXRoaW5nIHdlbnQgd3JvbmdcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ1c2VybmFtZUV4aXN0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSBcIlVzZXJuYW1lIGFscmVhZHkgZXhpc3RcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJyb29tRnVsbFwiIDpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9IFwiUm9vbSBpcyBhbHJlYWR5IGZ1bGwuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0IDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwibG9naW5Db250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcInNvY2tldFNlcnZpY2VcIiwgXCJkaXNwbGF5U2VydmljZVwiLCBsb2dpbkNvbnRyb2xsZXJdKTtcclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBqdXN0aWpuZGVwb3ZlciBvbiAxNi8xMi8xNS5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uKCl7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBwbGF5Q29udHJvbGxlciA9IGZ1bmN0aW9uKCRzY29wZSwgJHJvb3RTY29wZSwgc29ja2V0U2VydmljZSwgZXZlbnRTZXJ2aWNlLCBkaXNwbGF5U2VydmljZSl7XHJcbiAgICAgICAgJHNjb3BlLlBDU2hvdyA9IGRpc3BsYXlTZXJ2aWNlLmdldFBDU2hvdztcclxuICAgICAgICAkc2NvcGUuc2hvd1NldHRpbmdzID0gZGlzcGxheVNlcnZpY2UuZ2V0U2V0dGluZ1Nob3c7XHJcbiAgICAgICAgJHNjb3BlLmxpZmU9MztcclxuICAgICAgICAkc2NvcGUuZ2V0TnVtYmVyID0gZnVuY3Rpb24obnVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXkobnVtKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5jb2xvcj1cImJsdWVcIjtcclxuICAgICAgICAkc2NvcGUuc3RhcnRHYW1lID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLlNldHRpbmdzID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyIGJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2J0blNldHRpbmdzJylbMF0uY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgIGlmKGJ0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3JvdGF0ZScpPT10cnVlKXtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlTZXJ2aWNlLnNldFNldHRpbmdTaG93KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3JvdGF0ZUFudGknKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5U2VydmljZS5zZXRTZXR0aW5nU2hvdyh0cnVlKTtcclxuICAgICAgICAgICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3JvdGF0ZScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnNob290ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgc29ja2V0U2VydmljZS5lbWl0KFwicGxheWVyU2hvdFwiLCBudWxsKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc2VuZERldmljZU9yaWVudGF0aW9uID0gZnVuY3Rpb24oZXZlbnREYXRhKXtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgLy9kYXRhLmdhbW1hID0gZXZlbnREYXRhLmdhbW1hO1xyXG4gICAgICAgICAgICBkYXRhLmJldGEgPSBldmVudERhdGEuYmV0YTtcclxuICAgICAgICAgICAgLy9kYXRhLmFscGhhID0gZXZlbnREYXRhLmFscGhhO1xyXG4gICAgICAgICAgICBzb2NrZXRTZXJ2aWNlLmVtaXQoXCJkZXZpY2VPcmllbnRhdGlvblwiLCBkYXRhKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZXZlbnRTZXJ2aWNlLnN1YnNjcmliZU1lKCk7XHJcbiAgICAgICAgJHJvb3RTY29wZS4kb24oJ2FwcC5kZXZpY2VvcmllbnRhdGlvbkV2ZW50JywgZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgICBzZW5kRGV2aWNlT3JpZW50YXRpb24oYik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRzY29wZS5sZWF2ZVJvb20gPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzb2NrZXRTZXJ2aWNlLmVtaXQoXCJnc21EaXNjb25uZWN0XCIsIG51bGwpO1xyXG4gICAgICAgICAgICBkaXNwbGF5U2VydmljZS5zZXRMQ1Nob3codHJ1ZSk7XHJcbiAgICAgICAgICAgIGRpc3BsYXlTZXJ2aWNlLnNldFBDU2hvdyhmYWxzZSk7XHJcbiAgICAgICAgICAgIGRpc3BsYXlTZXJ2aWNlLnNldFNldHRpbmdTaG93KGZhbHNlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzb2NrZXRTZXJ2aWNlLm9uKFwibWVzc2FnZVwiLCBmdW5jdGlvbihtZXNzYWdlKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGlmKG1lc3NhZ2UgPT0gXCJjb25uZWN0aW9uRXN0YWJsaXNoZWRcIil7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9IFwiV2FpdGluZyBvbiBvdGhlciBwbGF5ZXJzXCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhcnRHYW1lID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKG1lc3NhZ2UgPT0gXCJzdGFydEdhbWVcIil7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhcnRHYW1lID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzb2NrZXRTZXJ2aWNlLm9uKFwibGlmZVwiLGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICBpZihkYXRhPT0tMSl7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9IFwiR2FtZSBvdmVyXCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhcnRHYW1lPWZhbHNlO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICRzY29wZS5saWZlID0gZGF0YTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcInBsYXlDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcIiRyb290U2NvcGVcIiwgXCJzb2NrZXRTZXJ2aWNlXCIsIFwiZXZlbnRTZXJ2aWNlXCIsIFwiZGlzcGxheVNlcnZpY2VcIiwgcGxheUNvbnRyb2xsZXJdKVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGp1c3Rpam5kZXBvdmVyIG9uIDE2LzEyLzE1LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuICAgIHZhciBkaXNwbGF5U2VydmljZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgLy9Mb2dpbiBDb250cm9sbGVyXHJcbiAgICAgICAgdmFyIExDU2hvdyA9IHRydWU7XHJcbiAgICAgICAgLy9QbGF5IGNvbnRyb2xsZXJcclxuICAgICAgICB2YXIgUENTaG93ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHZhciBTZXR0aW5nU2hvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm57XHJcbiAgICAgICAgICAgIGdldExDU2hvdzogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBMQ1Nob3c7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldExDU2hvdzogZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgTENTaG93ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFBDU2hvdzogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQQ1Nob3c7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldFBDU2hvdzogZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgUENTaG93ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFNldHRpbmdTaG93OiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdTaG93O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRTZXR0aW5nU2hvdzogZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgU2V0dGluZ1Nob3cgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdkaXNwbGF5U2VydmljZScsIFtkaXNwbGF5U2VydmljZV0pO1xyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IE1pY2hpZWwgb24gMTYvMTIvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG4gICAgdmFyIGV2ZW50U2VydmljZSA9IGZ1bmN0aW9uKCRyb290U2NvcGUsJHdpbmRvdyl7XHJcbiAgICAgICAgZnVuY3Rpb24gc3Vic0Z1bmMoKSB7XHJcbiAgICAgICAgICAgICR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlb3JpZW50YXRpb24nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2FwcC5kZXZpY2VvcmllbnRhdGlvbkV2ZW50JywgZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBcInN1YnNjcmliZU1lXCI6IHN1YnNGdW5jXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJldmVudFNlcnZpY2VcIiwgW1wiJHJvb3RTY29wZVwiLFwiJHdpbmRvd1wiLCBldmVudFNlcnZpY2VdKTtcclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBqdXN0aWpuZGVwb3ZlciBvbiAwOS8xMi8xNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICB2YXIgc29ja2V0U2VydmljZSA9IGZ1bmN0aW9uKCRyb290U2NvcGUpe1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIC8vcHJpdmF0ZVxyXG4gICAgICAgIHZhciBzb2NrZXQgPSBpby5jb25uZWN0KHdpbmRvdy5sb2NhdGlvbi5ob3N0KTtcclxuICAgICAgICAvL2Z1bmN0aW9uc1xyXG4gICAgICAgIHZhciBvbiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHNvY2tldC5vbihldmVudE5hbWUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHNvY2tldCwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGVtaXQgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBzb2NrZXQuZW1pdChldmVudE5hbWUsIGRhdGEsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShzb2NrZXQsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljXHJcbiAgICAgICAgcmV0dXJue1xyXG4gICAgICAgICAgICBvbjogb24sXHJcbiAgICAgICAgICAgIGVtaXQ6IGVtaXQsXHJcbiAgICAgICAgICAgIHNvY2tldDogc29ja2V0XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5mYWN0b3J5KFwic29ja2V0U2VydmljZVwiLCBbXCIkcm9vdFNjb3BlXCIsIHNvY2tldFNlcnZpY2VdKTtcclxuXHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
