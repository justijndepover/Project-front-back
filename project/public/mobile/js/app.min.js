!function(){angular.module("app",[])}(),function(){var n=function(n,o,e){n.LCShow=e.getLCShow,o.on("startGame",function(n){console.log("start game")}),o.on("roomDisconnect",function(n){}),n.joinRoom=function(n,e){var t={};t.username=n,t.room=e.toUpperCase(),o.emit("gsmConnect",t)},o.on("message",function(o){switch(console.log("connectie"),o){case"connectionEstablished":e.setPCShow(!0),e.setLCShow(!1);break;case"connectionRefused":n.text="Something went wrong";break;case"usernameExist":n.text="Username already exist";break;case"roomFull":n.text="Room is already full."}})};angular.module("app").controller("loginController",["$scope","socketService","displayService",n])}(),function(){var n=function(){var n=!0,o=!1;return{getLCShow:function(){return n},setLCShow:function(o){n=o},getPCShow:function(){return o},setPCShow:function(n){o=n}}};angular.module("app").factory("displayService",[n])}(),function(){var n=function(n,o){function e(){o.addEventListener("deviceorientation",function(o){n.$broadcast("app.deviceorientationEvent",o)})}return{subscribeMe:e}};angular.module("app").factory("eventService",["$rootScope","$window",n])}(),function(){var n=function(n){"use strict";var o=io.connect(window.location.host),e=function(e,t){o.on(e,function(){var e=arguments;n.$apply(function(){t.apply(o,e)})})},t=function(e,t,c){o.emit(e,t,function(){var e=arguments;n.$apply(function(){c&&c.apply(o,e)})})};return{on:e,emit:t,socket:o}};angular.module("app").factory("socketService",["$rootScope",n])}();
//# sourceMappingURL=data:application/json;base64,
