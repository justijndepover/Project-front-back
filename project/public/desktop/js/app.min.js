!function(){angular.module("app",[])}(),function(){var e=function(e,t,a,i){e.LCShow=a.getLCShow;var o=function(){t.emit("pcconnect",null)};e.room="",t.on("requestRoom",function(t){e.room=t}),t.on("deviceOrientation",function(e){var t=(e.username,{});t.gamma=e.gamma,t.beta=e.beta,t.alpha=e.alpha}),e.usernames={},e.checkUserCount=!1,t.on("updateusers",function(t){i.setPlayers(t),e.usernames=t,e.checkUserCount=Object.keys(e.usernames).length<0}),e.startGame=function(){t.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){o()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",e])}(),function(){"use strict";var e=function(e,t,a,i,o,n){function r(e,t){return t.username==e.userName}function s(){m.length>0&&(m[0].speed=0,m[1].speed=0),d.clearRect(0,0,u.width,u.height);var e=u.width/100;if(0!=f.length){var t=u.width/100,a=t*f[0].image.height/f[0].image.width;for(var i in f){var o=f[i];o.width=t,o.height=a,0==o.explodeStage?(d.save(),d.translate(o.x*e,o.y*e),d.rotate(o.rotation/180*Math.PI),d.drawImage(o.image,-t/2,-a/2,t,a),d.restore(),f[i].x=Math.cos((o.rotation-90)/180*Math.PI)+o.x,f[i].y=Math.sin((o.rotation-90)/180*Math.PI)+o.y):o.explodeStage<4&&(console.log(o.explosionImage),d.save(),d.translate(o.x*e,o.y*e),d.drawImage(o.explosionImage,-t,-t,2*t,2*t),d.restore())}}if(0!=m.length){var n=u.width/20,r=n*m[0].image.height/m[0].image.width;for(var s in m){var l=m[s];l.width=n,l.height=r,d.save(),d.translate(l.x*e,l.y*e),d.rotate(l.rotation/180*Math.PI),d.drawImage(l.image,-n/2,-r/2,n,r),l.damage>0&&d.drawImage(l.damageImage,-n/2,-r/2,n,r),d.restore(),m[s].x=Math.cos((l.rotation-90)/180*Math.PI)/10*l.speed+l.x,m[s].y=Math.sin((l.rotation-90)/180*Math.PI)/10*l.speed+l.y}}h(),c()}function h(){for(var e in f)f[e].x<0||f[e].x>u.width||f[e].y<0||f[e].y>u.height?f.splice(e,1):f[e].explodeStage>0&&(f[e].explodeStage<4?f[e].explode():f.splice(e,1))}function c(){var e=[];for(var t in m){m[t].damage<4&&e.push(m[t]);for(var a in f)if(0==f[a].explodeStage&&f[a].player!=m[t].userName){var o=Math.sqrt(2)/2*(f[a].height/2-f[a].width/2),n=(360-f[a].rotation)/180*Math.PI,r=f[a].x*u.width/100-o*Math.sin(n),s=f[a].y*u.width/100-o*Math.cos(n),h=m[t].x*u.width/100,c=m[t].y*u.width/100,p=Math.sqrt((r-h)*(r-h)+(s-c)*(s-c));if(p<f[a].width/2+m[t].width/2){var g=new Audio("../../assets/Bonus/sfx_lose.ogg");g.play(),m[t].increaseDamage();var d={};d.username=m[t].userName,d.life=3-m[t].damage,i.emit("playerLife",d),f[a].explode()}}}1==e.length&&l(e)}function l(a){angular.isDefined(g)&&(t.cancel(g),g=void 0),e.endGame=!0,e.endGameText=a[0].userName+" is the winner!"}var p=[{x:10,y:10,rotation:135},{x:90,y:10,rotation:225},{x:90,y:90,rotation:315},{x:10,y:90,rotation:45}];e.PCShow=o.getPCShow,e.endGame=!1;var g,u=document.getElementById("game"),d=u.getContext("2d"),m=new Array,f=new Array;i.on("initGame",function(){var e=n.getPlayers(),a=0;for(var i in e){var o=e[i];m.push(new Spaceship(o.username,p[a].x,p[a].y,o.color,p[a].rotation)),a++}g=t(s,10)}),i.on("userleft",function(e){var t=null;for(var a in m)1==r(m[a],e)&&(t=a);m.splice(t,1)}),i.on("updateGameData",function(e){var t=null;for(var a in m)1==r(m[a],e)&&(t=a);null!=t&&m[t].rotateSpaceshipRelative(e.orientation)}),i.on("playerShot",function(e){var t=null;for(var a in m)1==r(m[a],e)&&(t=a);if(null!=t){var i=m[t],o=(360-(i.rotation+180))/180*Math.PI,n=i.x+u.width/400*Math.sin(o),s=i.y+u.width/400*Math.cos(o);f.push(new Bullet(n,s,i.rotation,i.color,i.userName));var h="../../assets/Bonus/sfx_laser2.ogg";t%2==0&&(h="../../assets/Bonus/sfx_laser1.ogg");var c=new Audio(h);c.play()}}),e.restartGame=function(){e.endGame=!1;var t=0;for(var a in m)m[a].reset(p[t].x,p[t].y,p[t].rotation),t++}};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",e])}(),function(){var e=function(e){function t(t,a,i){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,angular.element(e).bind("resize",function(){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,t.$digest()})}return{restrict:"E",link:t,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",e])}();var Bullet=function(e,t,a,i,o){this.x=e,this.y=t,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=o,this.explosionImage=new Image,this.explodeStage=0,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"};Bullet.prototype.explode=function(){if(this.explodeStage<4){this.explodeStage++;var e;e=this.explodeStage<3?1:2,this.explosionImage.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"Explode"+e+".png"}else this.explosionImage.src=""};var Spaceship=function(e,t,a,i,o){this.userName=e,this.x=t,this.y=a,this.speed=1,this.color=i,this.rotation=o,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png"};Spaceship.prototype.reset=function(e,t,a){this.speed=1,this.damage=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png"},Spaceship.prototype.moveSpaceship=function(e,t){this.x=e,this.y=t},Spaceship.prototype.moveSpaceshipRelative=function(e,t){this.x=this.x+e,this.y=this.y+t},Spaceship.prototype.rotateSpaceship=function(e){this.rotation=e},Spaceship.prototype.rotateSpaceshipRelative=function(e){this.rotation=this.rotation+e/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0?this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png":4==this.damage&&(this.damageImage.src="../assets/PNG/Damage/explode.gif")},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},function(){var e=function(){var e=!0,t=!1;return{getLCShow:function(){return e},setLCShow:function(t){e=t},getPCShow:function(){return t},setPCShow:function(e){t=e}}};angular.module("app").factory("displayService",[e])}(),function(){var e=function(){var e=[];return{getPlayers:function(){return e},setPlayers:function(t){e=t}}};angular.module("app").factory("playerService",[e])}(),function(){var e=function(e){"use strict";var t=io.connect(window.location.host),a=function(a,i){t.on(a,function(){var a=arguments;e.$apply(function(){i.apply(t,a)})})},i=function(a,i,o){t.emit(a,i,function(){var a=arguments;e.$apply(function(){o&&o.apply(t,a)})})};return{on:a,emit:i,socket:t}};angular.module("app").factory("socketService",["$rootScope",e])}();
//# sourceMappingURL=data:application/json;base64,
