!function(){angular.module("app",[])}(),function(){var n=function(n,e,t,i){n.LCShow=t.getLCShow;var o=function(){e.emit("pcconnect",null)};n.room="",e.on("requestRoom",function(e){n.room=e}),e.on("deviceOrientation",function(n){var e=(n.username,{});e.gamma=n.gamma,e.beta=n.beta,e.alpha=n.alpha}),n.usernames={},n.checkUserCount=!1,e.on("updateusers",function(e){i.setPlayers(e),n.usernames=e,n.checkUserCount=Object.keys(n.usernames).length<0}),n.startGame=function(){e.emit("startGame",null),t.setLCShow(!1),t.setPCShow(!0)},function(){o()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",n])}(),function(){"use strict";var n=function(n,e,t,i,o){n.PCShow=i.getPCShow,n.startGame=!1,t.on("gameCycle",function(n){})};angular.module("app").controller("playController",["$scope","$window","socketService","displayService","playerService",n])}();var Spaceship=function(n,e,t){this.orientation=0,this.gamerId=n,this.x=e,this.y=t};Spaceship.prototype.moveSpaceship=function(n,e){},function(){var n=function(n){function e(e,t,i){n.innerWidth<n.innerHeight?e.width=n.innerWidth-20:e.width=n.innerHeight-20,angular.element(n).bind("resize",function(){n.innerWidth<n.innerHeight?e.width=n.innerWidth-20:e.width=n.innerHeight-20,e.$digest()})}return{restrict:"E",link:e,replace:!0,template:'<canvas class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",n])}(),function(){var n=function(){var n=!0,e=!1;return{getLCShow:function(){return n},setLCShow:function(e){n=e},getPCShow:function(){return e},setPCShow:function(n){e=n}}};angular.module("app").factory("displayService",[n])}(),function(){var n=function(){var n=[];return{getPlayers:function(){return n},setPlayers:function(e){n=e}}};angular.module("app").factory("playerService",[n])}(),function(){var n=function(n){"use strict";var e=io.connect(window.location.host),t=function(t,i){e.on(t,function(){var t=arguments;n.$apply(function(){i.apply(e,t)})})},i=function(t,i,o){e.emit(t,i,function(){var t=arguments;n.$apply(function(){o&&o.apply(e,t)})})};return{on:t,emit:i,socket:e}};angular.module("app").factory("socketService",["$rootScope",n])}();
//# sourceMappingURL=data:application/json;base64,
