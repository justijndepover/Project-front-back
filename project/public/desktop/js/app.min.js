!function(){angular.module("app",[])}(),function(){var e=function(e,n){var o=function(){n.emit("pcconnect",null)};e.room="",n.on("requestRoom",function(n){e.room=n}),n.on("deviceOrientation",function(e){var n=(e.username,{});n.gamma=e.gamma,n.beta=e.beta,n.alpha=e.alpha}),e.usernames={},n.on("updateusers",function(n){e.usernames=n}),function(){o()}()};angular.module("app").controller("socketController",["$scope","socketService",e])}(),angular.module("app").directive("qrcode",["$window",function(e){var n=!!e.CanvasRenderingContext2D,o={L:"Low",M:"Medium",Q:"Quartile",H:"High"},t=function(e,n,o,t){for(var r=0;o>r;r++)for(var i=0;o>i;i++){var a=Math.ceil((i+1)*t)-Math.floor(i*t),c=Math.ceil((r+1)*t)-Math.floor(r*t);e.fillStyle=n.isDark(r,i)?"#000":"#fff",e.fillRect(Math.round(i*t),Math.round(r*t),a,c)}};return{restrict:"E",template:'<canvas class="qrcode"></canvas>',link:function(e,r,i){var a,c,u,s,f,l,d,p,m,v=r[0],h=r.find("canvas"),g=h[0],M=n?g.getContext("2d"):null,w="download"in i,$=i.href,q=w||$?document.createElement("a"):"",y=/^\s+|\s+$/g,C=function(e){c=Math.max(1,Math.min(parseInt(e,10),10))||4},b=function(e){u=e in o?e:"M"},k=function(e){if(e){s=e.replace(y,""),p=qrcode(c,u),p.addData(s);try{p.make()}catch(n){return void(a=n.message)}a=!1,l=p.getModuleCount()}},L=function(e){f=parseInt(e,10)||2*l,d=f/l,g.width=g.height=f},S=function(){if(p){if(a)return q&&(q.removeAttribute("download"),q.title="",q.href="#_"),n||(v.innerHTML='<img src width="'+f+'"height="'+f+'"class="qrcode">'),void e.$emit("qrcode:error",a);if(w&&(v.download="qrcode.png",v.title="Download QR code"),n){if(t(M,p,l,d),w)return void(v.href=g.toDataURL("image/png"))}else if(v.innerHTML=p.createImgTag(d,0),m=r.find("img"),m.addClass("qrcode"),w)return void(v.href=m[0].src);$&&(v.href=$)}};q&&(q.className="qrcode-link",h.wrap(q),v=v.firstChild),C(i.version),b(i.errorCorrectionLevel),L(i.size),i.$observe("version",function(e){e&&(C(e),k(s),L(f),S())}),i.$observe("errorCorrectionLevel",function(e){e&&(b(e),k(s),L(f),S())}),i.$observe("data",function(e){e&&(k(e),L(f),S())}),i.$observe("size",function(e){e&&(L(e),S())}),i.$observe("href",function(e){e&&($=e,S())})}}}]);var Spaceship=function(e,n,o){this.orientation=0,this.gamerId=e,this.x=n,this.y=o};Spaceship.prototype.moveSpaceship=function(e,n){},function(){var e=function(e){"use strict";var n=io.connect(window.location.host),o=function(o,t){n.on(o,function(){var o=arguments;e.$apply(function(){t.apply(n,o)})})},t=function(o,t,r){n.emit(o,t,function(){var o=arguments;e.$apply(function(){r&&r.apply(n,o)})})};return{on:o,emit:t,socket:n}};angular.module("app").factory("socketService",["$rootScope",e])}();
//# sourceMappingURL=data:application/json;base64,
