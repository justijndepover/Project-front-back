!function(){angular.module("app",[])}();var Bullet=function(t,e,a,i,n){this.x=t,this.y=e,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=n,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"},Spaceship=function(t,e,a,i,n){this.userName=t,this.x=e,this.y=a,this.speed=1,this.color=i,this.rotation=n,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png"};Spaceship.prototype.moveSpaceship=function(t,e){this.x=t,this.y=e},Spaceship.prototype.moveSpaceshipRelative=function(t,e){this.x=this.x+t,this.y=this.y+e},Spaceship.prototype.rotateSpaceship=function(t){this.rotation=t},Spaceship.prototype.rotateSpaceshipRelative=function(t){this.rotation=this.rotation+t/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},function(){var t=function(t){function e(e,a,i){t.innerWidth<t.innerHeight?e.width=t.innerWidth-20:e.width=t.innerHeight-20,angular.element(t).bind("resize",function(){t.innerWidth<t.innerHeight?e.width=t.innerWidth-20:e.width=t.innerHeight-20,e.$digest()})}return{restrict:"E",link:e,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",t])}(),function(){var t=function(t,e,a,i){t.LCShow=a.getLCShow;var n=function(){e.emit("pcconnect",null)};t.room="",e.on("requestRoom",function(e){t.room=e}),e.on("deviceOrientation",function(t){var e=(t.username,{});e.gamma=t.gamma,e.beta=t.beta,e.alpha=t.alpha}),t.usernames={},t.checkUserCount=!1,e.on("updateusers",function(e){i.setPlayers(e),t.usernames=e,t.checkUserCount=Object.keys(t.usernames).length<0}),t.startGame=function(){e.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){n()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",t])}(),function(){"use strict";var t=function(t,e,a,i,n,o){function r(t,e){return e.username==t.userName?!0:!1}function s(){l.clearRect(0,0,u.width,u.height);var t=u.width/100;if(0!=m.length){var e=u.width/100,a=e*m[0].image.height/m[0].image.width;for(var i in m){var n=m[i];n.width=e,n.height=a,l.save(),l.translate(n.x*t,n.y*t),l.rotate(n.rotation/180*Math.PI),l.drawImage(n.image,-e/2,-a/2,e,a),l.restore(),m[i].x=Math.cos((n.rotation-90)/180*Math.PI)+n.x,m[i].y=Math.sin((n.rotation-90)/180*Math.PI)+n.y}}if(0!=g.length){g[1].speed=0,g[0].speed=0;var o=u.width/20,r=o*g[0].image.height/g[0].image.width;for(var s in g){var p=g[s];p.width=o,p.height=r,l.save(),l.translate(p.x*t,p.y*t),l.rotate(p.rotation/180*Math.PI),l.drawImage(p.image,-o/2,-r/2,o,r),p.damage>0&&l.drawImage(p.damageImage,-o/2,-r/2,o,r),l.restore(),g[s].x=Math.cos((p.rotation-90)/180*Math.PI)/10*p.speed+p.x,g[s].y=Math.sin((p.rotation-90)/180*Math.PI)/10*p.speed+p.y}}h(),c()}function h(){for(var t in m)(m[t].x<0||m[t].x>u.width||m[t].y<0||m[t].y>u.height)&&m.splice(t,1)}function c(){for(var t in g)for(var e in m)if(m[e].player!=g[t].userName){var a=Math.sqrt(2)/2*m[e].width/2,i=(360-(m[e].rotation-90)-90)/180*Math.PI,n=m[e].x+a*Math.sin(i),o=m[e].y+a*Math.cos(i),r=Math.sqrt(2)/2*g[t].height/2,s=(360-(g[t].rotation-90)-90)/180*Math.PI,h=g[t].x+r*Math.sin(s),c=g[t].y+r*Math.cos(s),p=Math.sqrt(Math.pow(n-h,2)+Math.pow(o-c,2));a+r>p&&(g[t].increaseDamage(),m.splice(e,1))}}t.PCShow=n.getPCShow,t.startGame=!1;var p,u=document.getElementById("game"),l=u.getContext("2d"),g=new Array,m=new Array;i.on("initGame",function(){var t=o.getPlayers();for(var a in t){var i=t[a];g.push(new Spaceship(i.username,i.x,i.y,i.color,i.rotation))}p=e(s,10)}),i.on("updateGameData",function(t){var e=null;for(var a in g)1==r(g[a],t)&&(e=a);null!=e&&g[e].rotateSpaceshipRelative(t.orientation)}),i.on("playerShot",function(t){var e=null;for(var a in g)1==r(g[a],t)&&(e=a);if(null!=e){var i=g[e];m.push(new Bullet(i.x,i.y,i.rotation,i.color,i.userName))}})};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",t])}(),function(){var t=function(){var t=!0,e=!1;return{getLCShow:function(){return t},setLCShow:function(e){t=e},getPCShow:function(){return e},setPCShow:function(t){e=t}}};angular.module("app").factory("displayService",[t])}(),function(){var t=function(){var t=[];return{getPlayers:function(){return t},setPlayers:function(e){t=e}}};angular.module("app").factory("playerService",[t])}(),function(){var t=function(t){"use strict";var e=io.connect(window.location.host),a=function(a,i){e.on(a,function(){var a=arguments;t.$apply(function(){i.apply(e,a)})})},i=function(a,i,n){e.emit(a,i,function(){var a=arguments;t.$apply(function(){n&&n.apply(e,a)})})};return{on:a,emit:i,socket:e}};angular.module("app").factory("socketService",["$rootScope",t])}();
//# sourceMappingURL=data:application/json;base64,
