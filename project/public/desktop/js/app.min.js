!function(){angular.module("app",[])}(),function(){var t=function(t,e,a,i){t.LCShow=a.getLCShow;var o=function(){e.emit("pcconnect",null)};t.room="",e.on("requestRoom",function(e){t.room=e}),e.on("deviceOrientation",function(t){var e=(t.username,{});e.gamma=t.gamma,e.beta=t.beta,e.alpha=t.alpha}),t.usernames={},t.checkUserCount=!1,e.on("updateusers",function(e){i.setPlayers(e),t.usernames=e,t.checkUserCount=Object.keys(t.usernames).length<0}),t.startGame=function(){e.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){o()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",t])}(),function(){"use strict";var t=function(t,e,a,i,o,n){function r(t,e){return e.username==t.userName?!0:!1}function s(){g.length>0&&(g[0].speed=0),u.clearRect(0,0,p.width,p.height);var t=p.width/100;if(0!=d.length){var e=p.width/100,a=e*d[0].image.height/d[0].image.width;for(var i in d){var o=d[i];o.width=e,o.height=a,0==o.explodeStage?(u.save(),u.translate(o.x*t,o.y*t),u.rotate(o.rotation/180*Math.PI),u.drawImage(o.image,-e/2,-a/2,e,a),u.restore(),d[i].x=Math.cos((o.rotation-90)/180*Math.PI)+o.x,d[i].y=Math.sin((o.rotation-90)/180*Math.PI)+o.y):o.explodeStage<4&&(console.log(o.explosionImage),u.save(),u.translate(o.x*t,o.y*t),u.drawImage(o.explosionImage,-e,-e,2*e,2*e),u.restore())}}if(0!=g.length){var n=p.width/20,r=n*g[0].image.height/g[0].image.width;for(var s in g){var l=g[s];l.width=n,l.height=r,u.save(),u.translate(l.x*t,l.y*t),u.rotate(l.rotation/180*Math.PI),u.drawImage(l.image,-n/2,-r/2,n,r),l.damage>0&&u.drawImage(l.damageImage,-n/2,-r/2,n,r),u.restore(),g[s].x=Math.cos((l.rotation-90)/180*Math.PI)/10*l.speed+l.x,g[s].y=Math.sin((l.rotation-90)/180*Math.PI)/10*l.speed+l.y}}h(),c()}function h(){for(var t in d)(d[t].x<0||d[t].x>p.width||d[t].y<0||d[t].y>p.height)&&d.splice(t,1)}function c(){for(var t in g)for(var e in d)if(d[e].player!=g[t].userName){var a=Math.sqrt(2)/2*(d[e].height/2-d[e].width/2),i=(360-d[e].rotation)/180*Math.PI,o=d[e].x*p.width/100-a*Math.sin(i),n=d[e].y*p.width/100-a*Math.cos(i),r=g[t].x*p.width/100,s=g[t].y*p.width/100,h=Math.sqrt((o-r)*(o-r)+(n-s)*(n-s));if(h<d[e].width/2+g[t].width/2){var c=new Audio("../../assets/Bonus/sfx_lose.ogg");c.play(),g[t].increaseDamage(),d[e].explodeStage<4?d[e].explode():d.splice(e,1)}}}t.PCShow=o.getPCShow,t.startGame=!1;var l,p=document.getElementById("game"),u=p.getContext("2d"),g=new Array,d=new Array;i.on("initGame",function(){var t=n.getPlayers();for(var a in t){var i=t[a];g.push(new Spaceship(i.username,i.x,i.y,i.color,i.rotation))}l=e(s,10)}),i.on("userleft",function(t){var e=null;for(var a in g)1==r(g[a],t)&&(e=a);g.splice(e,1)}),i.on("updateGameData",function(t){var e=null;for(var a in g)1==r(g[a],t)&&(e=a);null!=e&&g[e].rotateSpaceshipRelative(t.orientation)}),i.on("playerShot",function(t){var e=null;for(var a in g)1==r(g[a],t)&&(e=a);if(null!=e){var i=g[e],o=(360-(i.rotation+180))/180*Math.PI,n=i.x+p.width/400*Math.sin(o),s=i.y+p.width/400*Math.cos(o);if(d.push(new Bullet(n,s,i.rotation,i.color,i.userName)),e%2==0)var h=new Audio("../../assets/Bonus/sfx_laser1.ogg");else var h=new Audio("../../assets/Bonus/sfx_laser2.ogg");h.play()}})};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",t])}();var Bullet=function(t,e,a,i,o){this.x=t,this.y=e,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=o,this.explosionImage=new Image,this.explodeStage=0,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"};Bullet.prototype.explode=function(){if(this.explodeStage<4){this.explodeStage++;var t;t=this.explodeStage<3?1:2,this.explosionImage.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"Explode"+t+".png"}else this.explosionImage.src=""};var Spaceship=function(t,e,a,i,o){this.userName=t,this.x=e,this.y=a,this.speed=1,this.color=i,this.rotation=o,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png"};Spaceship.prototype.moveSpaceship=function(t,e){this.x=t,this.y=e},Spaceship.prototype.moveSpaceshipRelative=function(t,e){this.x=this.x+t,this.y=this.y+e},Spaceship.prototype.rotateSpaceship=function(t){this.rotation=t},Spaceship.prototype.rotateSpaceshipRelative=function(t){this.rotation=this.rotation+t/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},function(){var t=function(t){function e(e,a,i){t.innerWidth<t.innerHeight?e.width=t.innerWidth-20:e.width=t.innerHeight-20,angular.element(t).bind("resize",function(){t.innerWidth<t.innerHeight?e.width=t.innerWidth-20:e.width=t.innerHeight-20,e.$digest()})}return{restrict:"E",link:e,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",t])}(),function(){var t=function(){var t=!0,e=!1;return{getLCShow:function(){return t},setLCShow:function(e){t=e},getPCShow:function(){return e},setPCShow:function(t){e=t}}};angular.module("app").factory("displayService",[t])}(),function(){var t=function(){var t=[];return{getPlayers:function(){return t},setPlayers:function(e){t=e}}};angular.module("app").factory("playerService",[t])}(),function(){var t=function(t){"use strict";var e=io.connect(window.location.host),a=function(a,i){e.on(a,function(){var a=arguments;t.$apply(function(){i.apply(e,a)})})},i=function(a,i,o){e.emit(a,i,function(){var a=arguments;t.$apply(function(){o&&o.apply(e,a)})})};return{on:a,emit:i,socket:e}};angular.module("app").factory("socketService",["$rootScope",t])}();
//# sourceMappingURL=data:application/json;base64,
