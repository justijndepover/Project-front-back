!function(){angular.module("app",[])}(),function(){var t=function(t,e,a,i){t.LCShow=a.getLCShow;var o=function(){e.emit("pcconnect",null)};t.room="",e.on("requestRoom",function(e){t.room=e}),e.on("deviceOrientation",function(t){var e=(t.username,{});e.gamma=t.gamma,e.beta=t.beta,e.alpha=t.alpha}),t.usernames={},t.checkUserCount=!1,e.on("updateusers",function(e){i.setPlayers(e),t.usernames=e,t.checkUserCount=Object.keys(t.usernames).length<0}),t.startGame=function(){e.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){o()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",t])}(),function(){"use strict";var t=function(t,e,a,i,o,r){function n(t,e){return e.username==t.userName}function s(){u.length>0,p.clearRect(0,0,d.width,d.height);var t=d.width/100;if(0!=f.length){var e=d.width/100,a=e*f[0].image.height/f[0].image.width;for(var i in f){var o=f[i];o.width=e,o.height=a,0==o.explodeStage?(p.save(),p.translate(o.x*t,o.y*t),p.rotate(o.rotation/180*Math.PI),p.drawImage(o.image,-e/2,-a/2,e,a),p.restore(),f[i].x=Math.cos((o.rotation-90)/180*Math.PI)+o.x,f[i].y=Math.sin((o.rotation-90)/180*Math.PI)+o.y):o.explodeStage<4&&(console.log(o.explosionImage),p.save(),p.translate(o.x*t,o.y*t),p.drawImage(o.explosionImage,-e,-e,2*e,2*e),p.restore())}}if(0!=u.length){var r=d.width/20,n=r*u[0].image.height/u[0].image.width;for(var s in u){var l=u[s];l.width=r,l.height=n,p.save(),p.translate(l.x*t,l.y*t),p.rotate(l.rotation/180*Math.PI),p.drawImage(l.image,-r/2,-n/2,r,n),l.damage>0&&p.drawImage(l.damageImage,-r/2,-n/2,r,n),p.restore(),u[s].x=Math.cos((l.rotation-90)/180*Math.PI)/10*l.speed+l.x,u[s].y=Math.sin((l.rotation-90)/180*Math.PI)/10*l.speed+l.y}}if(y.length>0)for(var g in y){var m=y[g];if(m.width=d.width/1500*m.image.width,m.height=m.width*m.image.height/m.image.width,p.save(),p.translate(m.x*t,m.y*t),p.rotate(m.rotation/180*Math.PI),p.drawImage(m.image,-m.width/2,-m.height/2,m.width,m.height),p.restore(),m.x<-5||m.x>105||m.y<-5||m.y>105){var v=Math.random();.25>v?(y[g].x=-4,y[g].y=Math.floor(100*Math.random()),y[g].rotation=Math.floor(180*Math.random()),y[g].setImage(Math.ceil(20*Math.random()))):.5>v?(y[g].x=Math.floor(100*Math.random()),y[g].y=-4,y[g].rotation=Math.floor(180*Math.random())+90,y[g].setImage(Math.ceil(20*Math.random()))):.75>v?(y[g].x=104,y[g].y=Math.floor(100*Math.random()),y[g].rotation=Math.floor(180*Math.random())+180,y[g].setImage(Math.ceil(20*Math.random()))):(y[g].x=Math.floor(100*Math.random()),y[g].y=104,y[g].rotation=Math.floor(180*Math.random())+270,y[g].setImage(Math.ceil(20*Math.random())))}else y[g].x=Math.cos((m.rotation-90)/180*Math.PI)/30+m.x,y[g].y=Math.sin((m.rotation-90)/180*Math.PI)/30+m.y}h(),c()}function h(){for(var t in f)f[t].x<0||f[t].x>d.width||f[t].y<0||f[t].y>d.height?f.splice(t,1):f[t].explodeStage>0&&(f[t].explodeStage<4?f[t].explode():f.splice(t,1))}function c(){var t=[];for(var e in u){u[e].damage<4&&t.push(u[e]);for(var a in f)if(0==f[a].explodeStage&&f[a].player!=u[e].userName){var o=Math.sqrt(2)/2*(f[a].height/2-f[a].width/2),r=(360-f[a].rotation)/180*Math.PI,n=f[a].x*d.width/100-o*Math.sin(r),s=f[a].y*d.width/100-o*Math.cos(r),h=u[e].x*d.width/100,c=u[e].y*d.width/100,g=Math.sqrt((n-h)*(n-h)+(s-c)*(s-c));if(g<f[a].width/2+u[e].width/2){u[e].increaseDamage();var m={};m.username=u[e].userName,m.life=3-u[e].damage,i.emit("playerLife",m),f[a].explode()}}}1==t.length&&l(t)}function l(a){angular.isDefined(m)&&(e.cancel(m),m=void 0),t.endGame=!0,t.endGameText=a[0].userName+" is the winner!",i.emit("endGame",a[0].userName)}var g=[{x:10,y:10,rotation:135},{x:90,y:10,rotation:225},{x:90,y:90,rotation:315},{x:10,y:90,rotation:45}];t.PCShow=o.getPCShow,t.endGame=!1;var m,d=document.getElementById("game"),p=d.getContext("2d"),u=new Array,f=new Array,y=new Array;i.on("initGame",function(){var t=r.getPlayers(),a=0;for(var i in t){var o=t[i];u.push(new Spaceship(o.username,g[a].x,g[a].y,o.color,g[a].rotation)),a++}for(var n=0;10>n;n++)y.push(new Asteroid(Math.floor(100*Math.random()),Math.floor(100*Math.random()),Math.floor(361*Math.random()),Math.ceil(20*Math.random())));m=e(s,10)}),i.on("userleft",function(t){var e=null;for(var a in u)1==n(u[a],t)&&(e=a);u.splice(e,1)}),i.on("updateGameData",function(t){var e=null;for(var a in u)1==n(u[a],t)&&(e=a);null!=e&&u[e].rotateSpaceshipRelative(t.orientation)}),i.on("playerShot",function(e){if(0==t.endGame){var a=null;for(var i in u)1==n(u[i],e)&&(a=i);if(null!=a){var o=u[a],r=(360-(o.rotation+180))/180*Math.PI,s=o.x+d.width/400*Math.sin(r),h=o.y+d.width/400*Math.cos(r);f.push(new Bullet(s,h,o.rotation,o.color,o.userName));var c="../../assets/Bonus/sfx_laser2.ogg";a%2==0&&(c="../../assets/Bonus/sfx_laser1.ogg");var l=new Audio(c);l.play()}}}),t.restartGame=function(){t.endGame=!1;var a=0;for(var o in u)u[o].reset(g[a].x,g[a].y,g[a].rotation),a++;p.clearRect(0,0,d.width,d.height),i.emit("restartGame",null),m=e(s,10)}};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",t])}(),function(){var t=function(t){function e(e,a,i){t.innerWidth<t.innerHeight?e.width=t.innerWidth-20:e.width=t.innerHeight-20,angular.element(t).bind("resize",function(){t.innerWidth<t.innerHeight?e.width=t.innerWidth-20:e.width=t.innerHeight-20,e.$digest()})}return{restrict:"E",link:e,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",t])}();var Asteroid=function(t,e,a,i){this.x=t,this.y=e,this.width=0,this.height=0,this.rotation=a,this.stage=i,this.image=new Image,this.image.src="../assets/PNG/Meteors/meteor_"+i+".png"};Asteroid.prototype.setImage=function(t){this.stage=t,this.image.src="../assets/PNG/Meteors/meteor_"+t+".png"};var Bullet=function(t,e,a,i,o){this.x=t,this.y=e,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=o,this.explosionImage=new Image,this.explodeStage=0,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"};Bullet.prototype.explode=function(){if(this.explodeStage<4){this.explodeStage++;var t;t=this.explodeStage<3?1:2,this.explosionImage.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"Explode"+t+".png"}else this.explosionImage.src=""};var Spaceship=function(t,e,a,i,o){this.userName=t,this.x=e,this.y=a,this.speed=1,this.color=i,this.rotation=o,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png"};Spaceship.prototype.reset=function(t,e,a){this.speed=1,this.damage=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.x=t,this.y=e,this.rotation=a},Spaceship.prototype.moveSpaceship=function(t,e){this.x=t,this.y=e},Spaceship.prototype.moveSpaceshipRelative=function(t,e){this.x=this.x+t,this.y=this.y+e},Spaceship.prototype.rotateSpaceship=function(t){this.rotation=t},Spaceship.prototype.rotateSpaceshipRelative=function(t){this.rotation=this.rotation+t/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0?this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png":4==this.damage&&(this.damageImage.src="../assets/PNG/Damage/explode.gif")},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},function(){var t=function(){var t=!0,e=!1;return{getLCShow:function(){return t},setLCShow:function(e){t=e},getPCShow:function(){return e},setPCShow:function(t){e=t}}};angular.module("app").factory("displayService",[t])}(),function(){var t=function(){var t=[];return{getPlayers:function(){return t},setPlayers:function(e){t=e}}};angular.module("app").factory("playerService",[t])}(),function(){var t=function(t){"use strict";var e=io.connect(window.location.host),a=function(a,i){e.on(a,function(){var a=arguments;t.$apply(function(){i.apply(e,a)})})},i=function(a,i,o){e.emit(a,i,function(){var a=arguments;t.$apply(function(){o&&o.apply(e,a)})})};return{on:a,emit:i,socket:e}};angular.module("app").factory("socketService",["$rootScope",t])}();
//# sourceMappingURL=data:application/json;base64,
