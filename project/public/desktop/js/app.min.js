!function(){angular.module("app",[])}(),function(){var e=function(e,t,a,i){e.LCShow=a.getLCShow;var n=function(){t.emit("pcconnect",null)};e.room="",t.on("requestRoom",function(t){e.room=t}),t.on("deviceOrientation",function(e){var t=(e.username,{});t.gamma=e.gamma,t.beta=e.beta,t.alpha=e.alpha}),e.usernames={},e.checkUserCount=!1,t.on("updateusers",function(t){i.setPlayers(t),e.usernames=t,e.checkUserCount=Object.keys(e.usernames).length<0}),e.startGame=function(){t.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){n()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",e])}(),function(){"use strict";var e=function(e,t,a,i,n,o){function r(e,t){return t.username==e.userName}function s(){d.length>0,m.clearRect(0,0,u.width,u.height);var e=u.width/100;if(0!=f.length){var t=u.width/100,a=t*f[0].image.height/f[0].image.width;for(var i in f){var n=f[i];n.width=t,n.height=a,0==n.explodeStage?(m.save(),m.translate(n.x*e,n.y*e),m.rotate(n.rotation/180*Math.PI),m.drawImage(n.image,-t/2,-a/2,t,a),m.restore(),f[i].x=Math.cos((n.rotation-90)/180*Math.PI)+n.x,f[i].y=Math.sin((n.rotation-90)/180*Math.PI)+n.y):n.explodeStage<4&&(console.log(n.explosionImage),m.save(),m.translate(n.x*e,n.y*e),m.drawImage(n.explosionImage,-t,-t,2*t,2*t),m.restore())}}if(0!=d.length){var o=u.width/20,r=o*d[0].image.height/d[0].image.width;for(var s in d){var l=d[s];l.width=o,l.height=r,m.save(),m.translate(l.x*e,l.y*e),m.rotate(l.rotation/180*Math.PI),m.drawImage(l.image,-o/2,-r/2,o,r),l.damage>0&&m.drawImage(l.damageImage,-o/2,-r/2,o,r),m.restore(),d[s].x=Math.cos((l.rotation-90)/180*Math.PI)/10*l.speed+l.x,d[s].y=Math.sin((l.rotation-90)/180*Math.PI)/10*l.speed+l.y}}h(),c()}function h(){for(var e in f)f[e].x<0||f[e].x>u.width||f[e].y<0||f[e].y>u.height?f.splice(e,1):f[e].explodeStage>0&&(f[e].explodeStage<4?f[e].explode():f.splice(e,1))}function c(){var e=[];for(var t in d){d[t].damage<4&&e.push(d[t]);for(var a in f)if(0==f[a].explodeStage&&f[a].player!=d[t].userName){var n=Math.sqrt(2)/2*(f[a].height/2-f[a].width/2),o=(360-f[a].rotation)/180*Math.PI,r=f[a].x*u.width/100-n*Math.sin(o),s=f[a].y*u.width/100-n*Math.cos(o),h=d[t].x*u.width/100,c=d[t].y*u.width/100,p=Math.sqrt((r-h)*(r-h)+(s-c)*(s-c));if(p<f[a].width/2+d[t].width/2){d[t].increaseDamage();var g={};g.username=d[t].userName,g.life=3-d[t].damage,i.emit("playerLife",g),f[a].explode()}}}1==e.length&&l(e)}function l(a){angular.isDefined(g)&&(t.cancel(g),g=void 0),e.endGame=!0,e.endGameText=a[0].userName+" is the winner!",i.emit("endGame",a[0].userName)}var p=[{x:10,y:10,rotation:135},{x:90,y:10,rotation:225},{x:90,y:90,rotation:315},{x:10,y:90,rotation:45}];e.PCShow=n.getPCShow,e.endGame=!1;var g,u=document.getElementById("game"),m=u.getContext("2d"),d=new Array,f=new Array;i.on("initGame",function(){var e=o.getPlayers(),a=0;for(var i in e){var n=e[i];d.push(new Spaceship(n.username,p[a].x,p[a].y,n.color,p[a].rotation)),a++}g=t(s,10)}),i.on("userleft",function(e){var t=null;for(var a in d)1==r(d[a],e)&&(t=a);d.splice(t,1)}),i.on("updateGameData",function(e){var t=null;for(var a in d)1==r(d[a],e)&&(t=a);null!=t&&d[t].rotateSpaceshipRelative(e.orientation)}),i.on("playerShot",function(t){if(0==e.endGame){var a=null;for(var i in d)1==r(d[i],t)&&(a=i);if(null!=a){var n=d[a],o=(360-(n.rotation+180))/180*Math.PI,s=n.x+u.width/400*Math.sin(o),h=n.y+u.width/400*Math.cos(o);f.push(new Bullet(s,h,n.rotation,n.color,n.userName));var c="../../assets/Bonus/sfx_laser2.ogg";a%2==0&&(c="../../assets/Bonus/sfx_laser1.ogg");var l=new Audio(c);l.play()}}}),e.restartGame=function(){e.endGame=!1;var a=0;for(var n in d)d[n].reset(p[a].x,p[a].y,p[a].rotation),a++;m.clearRect(0,0,u.width,u.height),i.emit("restartGame",null),g=t(s,10)}};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",e])}();var Bullet=function(e,t,a,i,n){this.x=e,this.y=t,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=n,this.explosionImage=new Image,this.explodeStage=0,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"};Bullet.prototype.explode=function(){if(this.explodeStage<4){this.explodeStage++;var e;e=this.explodeStage<3?1:2,this.explosionImage.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"Explode"+e+".png"}else this.explosionImage.src=""};var Spaceship=function(e,t,a,i,n){this.userName=e,this.x=t,this.y=a,this.speed=1,this.color=i,this.rotation=n,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png"};Spaceship.prototype.reset=function(e,t,a){this.speed=1,this.damage=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.x=e,this.y=t,this.rotation=a},Spaceship.prototype.moveSpaceship=function(e,t){this.x=e,this.y=t},Spaceship.prototype.moveSpaceshipRelative=function(e,t){this.x=this.x+e,this.y=this.y+t},Spaceship.prototype.rotateSpaceship=function(e){this.rotation=e},Spaceship.prototype.rotateSpaceshipRelative=function(e){this.rotation=this.rotation+e/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0?this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png":4==this.damage&&(this.damageImage.src="../assets/PNG/Damage/explode.gif")},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},function(){var e=function(e){function t(t,a,i){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,angular.element(e).bind("resize",function(){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,t.$digest()})}return{restrict:"E",link:t,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",e])}(),function(){var e=function(){var e=!0,t=!1;return{getLCShow:function(){return e},setLCShow:function(t){e=t},getPCShow:function(){return t},setPCShow:function(e){t=e}}};angular.module("app").factory("displayService",[e])}(),function(){var e=function(){var e=[];return{getPlayers:function(){return e},setPlayers:function(t){e=t}}};angular.module("app").factory("playerService",[e])}(),function(){var e=function(e){"use strict";var t=io.connect(window.location.host),a=function(a,i){t.on(a,function(){var a=arguments;e.$apply(function(){i.apply(t,a)})})},i=function(a,i,n){t.emit(a,i,function(){var a=arguments;e.$apply(function(){n&&n.apply(t,a)})})};return{on:a,emit:i,socket:t}};angular.module("app").factory("socketService",["$rootScope",e])}();
//# sourceMappingURL=data:application/json;base64,
