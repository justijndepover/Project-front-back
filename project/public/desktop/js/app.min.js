!function(){angular.module("app",[])}(),function(){var t=function(t,e,a,i){t.LCShow=a.getLCShow;var o=function(){e.emit("pcconnect",null)};t.room="",e.on("requestRoom",function(e){t.room=e}),e.on("deviceOrientation",function(t){var e=(t.username,{});e.gamma=t.gamma,e.beta=t.beta,e.alpha=t.alpha}),t.usernames={},t.checkUserCount=!1,e.on("updateusers",function(e){i.setPlayers(e),t.usernames=e,t.checkUserCount=Object.keys(t.usernames).length<0}),t.startGame=function(){e.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){o()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",t])}(),function(){"use strict";var t=function(t,e,a,i,o,r){function n(){var t=Math.floor(100*Math.random());for(var e in w)if(Math.abs(w[e].x-t)<10)return n();return t}function s(){var t=Math.floor(100*Math.random());for(var e in w)if(Math.abs(w[e].y-t)<10)return s();return t}function h(t,e){return e.username==t.userName}function d(){f.clearRect(0,0,u.width,u.height);var t=u.width/100;if(0!=y.length){var e=u.width/100,a=e*y[0].image.height/y[0].image.width;for(var i in y){var o=y[i];o.width=e,o.height=a,0==o.explodeStage?(f.save(),f.translate(o.x*t,o.y*t),f.rotate(o.rotation/180*Math.PI),f.drawImage(o.image,-e/2,-a/2,e,a),f.restore(),y[i].x=Math.cos((o.rotation-90)/180*Math.PI)+o.x,y[i].y=Math.sin((o.rotation-90)/180*Math.PI)+o.y):o.explodeStage<4&&(console.log(o.explosionImage),f.save(),f.translate(o.x*t,o.y*t),f.drawImage(o.explosionImage,-e,-e,2*e,2*e),f.restore())}}if(0!=w.length){var r=u.width/20,n=r*w[0].image.height/w[0].image.width;for(var s in w){var h=w[s];h.width=r,h.height=n,f.save(),f.translate(h.x*t,h.y*t),f.rotate(h.rotation/180*Math.PI),f.drawImage(h.image,-r/2,-n/2,r,n),h.damage>0&&f.drawImage(h.damageImage,-r/2,-n/2,r,n),f.restore(),h.damage<4&&(w[s].x=Math.cos((h.rotation-90)/180*Math.PI)/10*h.speed+h.x,w[s].y=Math.sin((h.rotation-90)/180*Math.PI)/10*h.speed+h.y)}}if(v.length>0)for(var d in v){var m=v[d];if(m.width=u.width/700*m.image.width,m.height=m.width*m.image.height/m.image.width,f.save(),f.translate(m.x*t,m.y*t),f.rotate(m.rotation/180*Math.PI),f.drawImage(m.image,-m.width/2,-m.height/2,m.width,m.height),f.restore(),m.x<-5||m.x>105||m.y<-5||m.y>105){var c=Math.random();.25>c?(v[d].x=-4,v[d].y=Math.floor(100*Math.random()),v[d].rotation=Math.floor(180*Math.random())):.5>c?(v[d].x=Math.floor(100*Math.random()),v[d].y=-4,v[d].rotation=Math.floor(180*Math.random())+90):.75>c?(v[d].x=104,v[d].y=Math.floor(100*Math.random()),v[d].rotation=Math.floor(180*Math.random())+180):(v[d].x=Math.floor(100*Math.random()),v[d].y=104,v[d].rotation=Math.floor(180*Math.random())+270),v[d].setImage(Math.ceil(18*Math.random()))}else v[d].x=Math.cos((m.rotation-90)/180*Math.PI)/30+m.x,v[d].y=Math.sin((m.rotation-90)/180*Math.PI)/30+m.y}l(),g()}function l(){for(var t in y)y[t].x<0||y[t].x>u.width||y[t].y<0||y[t].y>u.height?y.splice(t,1):y[t].explodeStage>0&&(y[t].explodeStage<4?y[t].explode():y.splice(t,1))}function g(){var t=[];for(var e in w){w[e].damage<4&&t.push(w[e]);for(var a in y)if(0==y[a].explodeStage&&y[a].player!=w[e].userName){var o=Math.sqrt(2)/2*(y[a].height/2-y[a].width/2),r=(360-y[a].rotation)/180*Math.PI,n=y[a].x*u.width/100-o*Math.sin(r),s=y[a].y*u.width/100-o*Math.cos(r),h=w[e].x*u.width/100,d=w[e].y*u.width/100,l=Math.sqrt((n-h)*(n-h)+(s-d)*(s-d));if(l<y[a].width/2+w[e].width/2){var g=new Audio("../../assets/Bonus/sfx_lose.ogg");g.play(),w[e].increaseDamage();var c={};c.username=w[e].userName,c.life=3-w[e].damage,i.emit("playerLife",c),y[a].explode()}}for(var p in v){var f=v[p].x*u.width/100,x=v[p].y*u.width/100,h=w[e].x*u.width/100,d=w[e].y*u.width/100,l=Math.sqrt((f-h)*(f-h)+(x-d)*(x-d));if(l<v[p].width/2+w[e].width/2){var g=new Audio("../../assets/Bonus/sfx_lose.ogg");g.play(),w[e].dead();var c={};c.username=w[e].userName,c.life=3-w[e].damage,i.emit("playerLife",c)}}for(var p in w)if(p!=e){var M=w[p].x*u.width/100,S=w[p].y*u.width/100,h=w[e].x*u.width/100,d=w[e].y*u.width/100,l=Math.sqrt((M-h)*(M-h)+(S-d)*(S-d));if(l<w[p].width/2+w[e].width/2){var g=new Audio("../../assets/Bonus/sfx_lose.ogg");g.play(),w[e].dead(),w[p].dead();var c={};c.username=w[e].userName,c.life=3-w[e].damage,i.emit("playerLife",c),c.username=w[p].userName,c.life=3-w[p].damage,i.emit("playerLife",c)}}if(w[e].x*u.width/100<w[e].height/2||w[e].x*u.width/100>u.width-w[e].height/2||w[e].y*u.width/100<w[e].height/2||w[e].y*u.width/100>u.width-w[e].height/2){var g=new Audio("../../assets/Bonus/sfx_lose.ogg");g.play(),w[e].dead();var c={};c.username=w[e].userName,c.life=3-w[e].damage,i.emit("playerLife",c)}}for(var p in v)for(var a in y)if(0==y[a].explodeStage&&y[a].player!=v[p].userName){var o=Math.sqrt(2)/2*(y[a].height/2-y[a].width/2),r=(360-y[a].rotation)/180*Math.PI,n=y[a].x*u.width/100-o*Math.sin(r),s=y[a].y*u.width/100-o*Math.cos(r),f=v[p].x*u.width/100,x=v[p].y*u.width/100,l=Math.sqrt((n-f)*(n-f)+(s-x)*(s-x));if(l<y[a].width/2+v[p].width/2){var g=new Audio("../../assets/Bonus/sfx_lose.ogg");g.play();var c={};c.username=v[p].userName,c.life=3-v[p].damage,i.emit("playerLife",c),y[a].explode()}}1==t.length&&m(t)}function m(a){angular.isDefined(p)&&(e.cancel(p),p=void 0),t.endGame=!0,t.endGameText=a[0].userName+" is the winner!",i.emit("endGame",a[0].userName)}var c=[{x:10,y:10,rotation:135},{x:90,y:10,rotation:225},{x:90,y:90,rotation:315},{x:10,y:90,rotation:45}];t.PCShow=o.getPCShow,t.endGame=!1;var p,u=document.getElementById("game"),f=u.getContext("2d"),w=new Array,y=new Array,v=new Array;new Array;i.on("initGame",function(){var t=r.getPlayers(),a=0;for(var i in t){var o=t[i];w.push(new Spaceship(o.username,c[a].x,c[a].y,o.color,c[a].rotation)),a++}for(var h=0;15>h;h++)v.push(new Asteroid(n(),s(),Math.floor(361*Math.random()),Math.ceil(18*Math.random())));p=e(d,10)}),i.on("userleft",function(t){var e=null;for(var a in w)1==h(w[a],t)&&(e=a);w.splice(e,1)}),i.on("updateGameData",function(t){var e=null;for(var a in w)1==h(w[a],t)&&(e=a);null!=e&&w[e].rotateSpaceshipRelative(t.orientation)}),i.on("playerShot",function(e){if(0==t.endGame){var a=null;for(var i in w)1==h(w[i],e)&&(a=i);if(null!=a){var o=w[a],r=(360-(o.rotation+180))/180*Math.PI,n=o.x+u.width/400*Math.sin(r),s=o.y+u.width/400*Math.cos(r);y.push(new Bullet(n,s,o.rotation,o.color,o.userName));var d="../../assets/Bonus/sfx_laser2.ogg";a%2==0&&(d="../../assets/Bonus/sfx_laser1.ogg");var l=new Audio(d);l.play()}}}),t.restartGame=function(){t.endGame=!1;var a=0;for(var o in w)w[o].reset(c[a].x,c[a].y,c[a].rotation),a++;v=[];for(var r=0;15>r;r++)v.push(new Asteroid(n(),s(),Math.floor(361*Math.random()),Math.ceil(18*Math.random())));y=[],f.clearRect(0,0,u.width,u.height),i.emit("restartGame",null),p=e(d,10)}};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",t])}(),function(){var t=function(t){function e(e,a,i){t.innerWidth<t.innerHeight?e.width=t.innerWidth-20:e.width=t.innerHeight-20,angular.element(t).bind("resize",function(){t.innerWidth<t.innerHeight?e.width=t.innerWidth-20:e.width=t.innerHeight-20,e.$digest()})}return{restrict:"E",link:e,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",t])}();var Asteroid=function(t,e,a,i){this.x=t,this.y=e,this.width=0,this.height=0,this.rotation=a,this.stage=i,this.image=new Image,this.image.src="../assets/PNG/Meteors/meteor_"+i+".png"};Asteroid.prototype.setImage=function(t){this.stage=t,this.image.src="../assets/PNG/Meteors/meteor_"+t+".png"};var Bullet=function(t,e,a,i,o){this.x=t,this.y=e,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=o,this.explosionImage=new Image,this.explodeStage=0,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"};Bullet.prototype.explode=function(){if(this.explodeStage<4){this.explodeStage++;var t;t=this.explodeStage<3?1:2,this.explosionImage.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"Explode"+t+".png"}else this.explosionImage.src=""};var Spaceship=function(t,e,a,i,o){this.userName=t,this.x=e,this.y=a,this.speed=1,this.color=i,this.rotation=o,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png"};Spaceship.prototype.reset=function(t,e,a){this.speed=1,this.damage=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.x=t,this.y=e,this.rotation=a},Spaceship.prototype.moveSpaceship=function(t,e){this.x=t,this.y=e},Spaceship.prototype.moveSpaceshipRelative=function(t,e){this.x=this.x+t,this.y=this.y+e},Spaceship.prototype.rotateSpaceship=function(t){this.rotation=t},Spaceship.prototype.rotateSpaceshipRelative=function(t){t>80?t=80:-80>t&&(t=-80),this.rotation=this.rotation+t/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0?this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png":4==this.damage&&(this.damageImage.src="../assets/PNG/Damage/explode.gif")},Spaceship.prototype.dead=function(){this.damage=4,this.damageImage.src="../assets/PNG/Damage/explode.gif"},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},function(){var t=function(){var t=!0,e=!1;return{getLCShow:function(){return t},setLCShow:function(e){t=e},getPCShow:function(){return e},setPCShow:function(t){e=t}}};angular.module("app").factory("displayService",[t])}(),function(){var t=function(){var t=[];return{getPlayers:function(){return t},setPlayers:function(e){t=e}}};angular.module("app").factory("playerService",[t])}(),function(){var t=function(t){"use strict";var e=io.connect(window.location.host),a=function(a,i){e.on(a,function(){var a=arguments;t.$apply(function(){i.apply(e,a)})})},i=function(a,i,o){e.emit(a,i,function(){var a=arguments;t.$apply(function(){o&&o.apply(e,a)})})};return{on:a,emit:i,socket:e}};angular.module("app").factory("socketService",["$rootScope",t])}();
//# sourceMappingURL=data:application/json;base64,
