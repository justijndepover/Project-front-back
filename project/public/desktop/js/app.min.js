!function(){angular.module("app",[])}(),function(){var e=function(e){function t(t,a,i){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,angular.element(e).bind("resize",function(){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,t.$digest()})}return{restrict:"E",link:t,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",e])}(),function(){var e=function(e,t,a,i){e.LCShow=a.getLCShow;var o=function(){t.emit("pcconnect",null)};e.room="",t.on("requestRoom",function(t){e.room=t}),t.on("deviceOrientation",function(e){var t=(e.username,{});t.gamma=e.gamma,t.beta=e.beta,t.alpha=e.alpha}),e.usernames={},e.checkUserCount=!1,t.on("updateusers",function(t){i.setPlayers(t),e.usernames=t,e.checkUserCount=Object.keys(e.usernames).length<0}),e.startGame=function(){t.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){o()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",e])}(),function(){"use strict";var e=function(e,t,a,i,o,n){function r(e,t){return t.username==e.userName?!0:!1}function s(){u.length>0&&(u[0].speed=0),g.clearRect(0,0,p.width,p.height);var e=p.width/100;if(0!=d.length){var t=p.width/100,a=t*d[0].image.height/d[0].image.width;for(var i in d){var o=d[i];o.width=t,o.height=a,0==o.explodeStage?(g.save(),g.translate(o.x*e,o.y*e),g.rotate(o.rotation/180*Math.PI),g.drawImage(o.image,-t/2,-a/2,t,a),g.restore(),d[i].x=Math.cos((o.rotation-90)/180*Math.PI)+o.x,d[i].y=Math.sin((o.rotation-90)/180*Math.PI)+o.y):o.explodeStage<4&&(console.log(o.explosionImage),g.save(),g.translate(o.x*e,o.y*e),g.drawImage(o.explosionImage,-t,-t,2*t,2*t),g.restore())}}if(0!=u.length){var n=p.width/20,r=n*u[0].image.height/u[0].image.width;for(var s in u){var l=u[s];l.width=n,l.height=r,g.save(),g.translate(l.x*e,l.y*e),g.rotate(l.rotation/180*Math.PI),g.drawImage(l.image,-n/2,-r/2,n,r),l.damage>0&&g.drawImage(l.damageImage,-n/2,-r/2,n,r),g.restore(),u[s].x=Math.cos((l.rotation-90)/180*Math.PI)/10*l.speed+l.x,u[s].y=Math.sin((l.rotation-90)/180*Math.PI)/10*l.speed+l.y}}h(),c()}function h(){for(var e in d)(d[e].x<0||d[e].x>p.width||d[e].y<0||d[e].y>p.height)&&d.splice(e,1),d[e].explodeStage>0&&(d[e].explodeStage<4?d[e].explode():d.splice(e,1))}function c(){for(var e in u)for(var t in d)if(0==d[t].explodeStage&&d[t].player!=u[e].userName){var a=Math.sqrt(2)/2*(d[t].height/2-d[t].width/2),o=(360-d[t].rotation)/180*Math.PI,n=d[t].x*p.width/100-a*Math.sin(o),r=d[t].y*p.width/100-a*Math.cos(o),s=u[e].x*p.width/100,h=u[e].y*p.width/100,c=Math.sqrt((n-s)*(n-s)+(r-h)*(r-h));if(c<d[t].width/2+u[e].width/2){var l=new Audio("../../assets/Bonus/sfx_lose.ogg");l.play(),u[e].increaseDamage();var g={};g.username=u[e].userName,g.life=3-u[e].damage,i.emit("playerLife",g),d[t].explode()}}}e.PCShow=o.getPCShow,e.startGame=!1;var l,p=document.getElementById("game"),g=p.getContext("2d"),u=new Array,d=new Array;i.on("initGame",function(){var e=n.getPlayers();for(var a in e){var i=e[a];u.push(new Spaceship(i.username,i.x,i.y,i.color,i.rotation))}l=t(s,10)}),i.on("userleft",function(e){var t=null;for(var a in u)1==r(u[a],e)&&(t=a);u.splice(t,1)}),i.on("updateGameData",function(e){var t=null;for(var a in u)1==r(u[a],e)&&(t=a);null!=t&&u[t].rotateSpaceshipRelative(e.orientation)}),i.on("playerShot",function(e){var t=null;for(var a in u)1==r(u[a],e)&&(t=a);if(null!=t){var i=u[t],o=(360-(i.rotation+180))/180*Math.PI,n=i.x+p.width/400*Math.sin(o),s=i.y+p.width/400*Math.cos(o);if(d.push(new Bullet(n,s,i.rotation,i.color,i.userName)),t%2==0)var h=new Audio("../../assets/Bonus/sfx_laser1.ogg");else var h=new Audio("../../assets/Bonus/sfx_laser2.ogg");h.play()}})};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",e])}();var Bullet=function(e,t,a,i,o){this.x=e,this.y=t,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=o,this.explosionImage=new Image,this.explodeStage=0,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"};Bullet.prototype.explode=function(){if(this.explodeStage<4){this.explodeStage++;var e;e=this.explodeStage<3?1:2,this.explosionImage.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"Explode"+e+".png"}else this.explosionImage.src=""};var Spaceship=function(e,t,a,i,o){this.userName=e,this.x=t,this.y=a,this.speed=1,this.color=i,this.rotation=o,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png"};Spaceship.prototype.moveSpaceship=function(e,t){this.x=e,this.y=t},Spaceship.prototype.moveSpaceshipRelative=function(e,t){this.x=this.x+e,this.y=this.y+t},Spaceship.prototype.rotateSpaceship=function(e){this.rotation=e},Spaceship.prototype.rotateSpaceshipRelative=function(e){this.rotation=this.rotation+e/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},function(){var e=function(){var e=!0,t=!1;return{getLCShow:function(){return e},setLCShow:function(t){e=t},getPCShow:function(){return t},setPCShow:function(e){t=e}}};angular.module("app").factory("displayService",[e])}(),function(){var e=function(){var e=[];return{getPlayers:function(){return e},setPlayers:function(t){e=t}}};angular.module("app").factory("playerService",[e])}(),function(){var e=function(e){"use strict";var t=io.connect(window.location.host),a=function(a,i){t.on(a,function(){var a=arguments;e.$apply(function(){i.apply(t,a)})})},i=function(a,i,o){t.emit(a,i,function(){var a=arguments;e.$apply(function(){o&&o.apply(t,a)})})};return{on:a,emit:i,socket:t}};angular.module("app").factory("socketService",["$rootScope",e])}();
//# sourceMappingURL=data:application/json;base64,
