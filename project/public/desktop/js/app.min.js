!function(){angular.module("app",[])}(),function(){var e=function(e,t,a,i){e.LCShow=a.getLCShow;var r=function(){t.emit("pcconnect",null)};e.room="",t.on("requestRoom",function(t){e.room=t}),t.on("deviceOrientation",function(e){var t=(e.username,{});t.gamma=e.gamma,t.beta=e.beta,t.alpha=e.alpha}),e.usernames={},e.checkUserCount=!1,t.on("updateusers",function(t){i.setPlayers(t),e.usernames=t,e.checkUserCount=Object.keys(e.usernames).length<0}),e.startGame=function(){t.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){r()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",e])}(),function(){"use strict";var e=function(e,t,a,i,r,o){function s(){var e=Math.floor(100*Math.random());for(var t in w)if(Math.abs(w[t].x-e)<10)return s();return e}function h(){var e=Math.floor(100*Math.random());for(var t in w)if(Math.abs(w[t].y-e)<10)return h();return e}function n(e,t){return t.username==e.userName}function d(){w.length>0&&(w[0].speed=0),0==M?(M=Math.floor(500*Math.random()+500),x.push(new Powerup(Math.floor(100*Math.random()),Math.floor(100*Math.random()),Math.ceil(3*Math.random()),Math.floor(2*Math.random())))):M--,f.clearRect(0,0,u.width,u.height);var e=u.width/100;if(0!=x.length)for(var t in x){var a=x[t];a.width=u.width/50,a.height=a.width*a.image.height/a.image.width,f.save(),f.translate(a.x*e,a.y*e),f.drawImage(a.image,-a.width/2,-a.height/2,a.width,a.height),f.restore(),a.decreaseDuration(),0==a.duration&&x.splice(t,1)}if(0!=y.length){var i=u.width/100,r=i*y[0].image.height/y[0].image.width;for(var o in y){var s=y[o];s.width=i,s.height=r,0==s.explodeStage?(f.save(),f.translate(s.x*e,s.y*e),f.rotate(s.rotation/180*Math.PI),f.drawImage(s.image,-i/2,-r/2,i,r),f.restore(),y[o].x=Math.cos((s.rotation-90)/180*Math.PI)+s.x,y[o].y=Math.sin((s.rotation-90)/180*Math.PI)+s.y):s.explodeStage<4&&(f.save(),f.translate(s.x*e,s.y*e),f.drawImage(s.explosionImage,-i,-i,2*i,2*i),f.restore())}}if(0!=w.length){var h=u.width/20,n=h*w[0].image.height/w[0].image.width;for(var d in w){var a=w[d];if(a.width=h,a.height=n,f.save(),f.translate(a.x*e,a.y*e),f.rotate(a.rotation/180*Math.PI),f.drawImage(a.image,-h/2,-n/2,h,n),a.damage>0&&f.drawImage(a.damageImage,-h/2,-n/2,h,n),a.dead&&w[d].explode(),a.damage<4&&(w[d].x=Math.cos((a.rotation-90)/180*Math.PI)/10*a.speed+a.x,w[d].y=Math.sin((a.rotation-90)/180*Math.PI)/10*a.speed+a.y),a.shield){var p=1.5*h,m=p/a.shieldImage.width*a.shieldImage.height;f.drawImage(a.shieldImage,-p/2,-m/2,p,m)}f.restore()}}if(v.length>0)for(var c in v){var S=v[c];if(S.width=u.width/700*S.image.width,S.height=S.width*S.image.height/S.image.width,f.save(),f.translate(S.x*e,S.y*e),f.rotate(S.rotation/180*Math.PI),f.drawImage(S.image,-S.width/2,-S.height/2,S.width,S.height),f.restore(),S.x<-5||S.x>105||S.y<-5||S.y>105){var I=Math.random();.25>I?(v[c].x=-4,v[c].y=Math.floor(100*Math.random()),v[c].rotation=Math.floor(180*Math.random())):.5>I?(v[c].x=Math.floor(100*Math.random()),v[c].y=-4,v[c].rotation=Math.floor(180*Math.random())+90):.75>I?(v[c].x=104,v[c].y=Math.floor(100*Math.random()),v[c].rotation=Math.floor(180*Math.random())+180):(v[c].x=Math.floor(100*Math.random()),v[c].y=104,v[c].rotation=Math.floor(180*Math.random())+270),v[c].speed=1,v[c].setImage(Math.ceil(18*Math.random()))}else v[c].x=Math.cos((S.rotation-90)/180*Math.PI)/30*v[c].speed+S.x,v[c].y=Math.sin((S.rotation-90)/180*Math.PI)/30*v[c].speed+S.y}l(),g()}function l(){for(var e in y)y[e].x<0||y[e].x>u.width||y[e].y<0||y[e].y>u.height?y.splice(e,1):y[e].explodeStage>0&&(y[e].explodeStage<4?y[e].explode():y.splice(e,1))}function g(){var e=[];for(var t in w){w[t].damage<4&&e.push(w[t]);for(var a in y)if(0==y[a].explodeStage&&y[a].player!=w[t].userName){var r=Math.sqrt(2)/2*(y[a].height/2-y[a].width/2),o=(360-y[a].rotation)/180*Math.PI,s=y[a].x*u.width/100-r*Math.sin(o),h=y[a].y*u.width/100-r*Math.cos(o),n=w[t].x*u.width/100,d=w[t].y*u.width/100,l=Math.sqrt((s-n)*(s-n)+(h-d)*(h-d)),g=1;if(w[t].shield&&(g=1.5),l<y[a].width/2+w[t].width/2*g){var m=new Audio("../../assets/Bonus/sfx_lose.ogg");if(m.play(),!w[t].shield){w[t].increaseDamage();var c={};c.username=w[t].userName,c.life=3-w[t].damage,i.emit("playerLife",c)}y[a].explode()}}for(var f in v){var M=v[f].x*u.width/100,S=v[f].y*u.width/100,n=w[t].x*u.width/100,d=w[t].y*u.width/100,l=Math.sqrt((M-n)*(M-n)+(S-d)*(S-d)),g=1;if(w[t].shield&&(g=1.5),l<v[f].width/2+w[t].width/2*g){var m=new Audio("../../assets/Bonus/sfx_lose.ogg");if(m.play(),w[t].shield)v[f].rotation=v[f].rotation+180,v[f].speed=3,v[f].x=Math.cos((v[f].rotation-90)/180*Math.PI)/30*v[f].speed+v[f].x,v[f].y=Math.sin((v[f].rotation-90)/180*Math.PI)/30*v[f].speed+v[f].y;else{w[t].dead();var c={};c.username=w[t].userName,c.life=3-w[t].damage,i.emit("playerLife",c)}}}for(var f in w)if(f!=t){var I=w[f].x*u.width/100,P=w[f].y*u.width/100,n=w[t].x*u.width/100,d=w[t].y*u.width/100,g=1;w[t].shield&&(g=1.5);var N=1;w[f].shield&&(N=1.5);var l=Math.sqrt((I-n)*(I-n)+(P-d)*(P-d));if(l<w[f].width/2*N+w[t].width/2*g){var m=new Audio("../../assets/Bonus/sfx_lose.ogg");m.play(),w[t].dead(),w[f].dead();var c={};c.username=w[t].userName,c.life=3-w[t].damage,i.emit("playerLife",c),c.username=w[f].userName,c.life=3-w[f].damage,i.emit("playerLife",c)}}if(w[t].x*u.width/100<w[t].height/2||w[t].x*u.width/100>u.width-w[t].height/2||w[t].y*u.width/100<w[t].height/2||w[t].y*u.width/100>u.width-w[t].height/2){var m=new Audio("../../assets/Bonus/sfx_lose.ogg");m.play(),w[t].dead();var c={};c.username=w[t].userName,c.life=3-w[t].damage,i.emit("playerLife",c)}for(var f in x){var G=x[f].x*u.width/100,C=x[f].y*u.width/100,n=w[t].x*u.width/100,d=w[t].y*u.width/100,l=Math.sqrt((G-n)*(G-n)+(C-d)*(C-d));if(l<x[f].width/2+w[t].width/2){var A=new Audio("../../assets/Bonus/sfx_zap.ogg");if(A.play(),w[t].addPowerup(x[f]),3==x[f].type){var c={};c.username=w[t].userName,c.life=3,i.emit("playerLife",c)}x.splice(f,1)}}}for(var f in v)for(var a in y)if(0==y[a].explodeStage&&y[a].player!=v[f].userName){var r=Math.sqrt(2)/2*(y[a].height/2-y[a].width/2),o=(360-y[a].rotation)/180*Math.PI,s=y[a].x*u.width/100-r*Math.sin(o),h=y[a].y*u.width/100-r*Math.cos(o),M=v[f].x*u.width/100,S=v[f].y*u.width/100,l=Math.sqrt((s-M)*(s-M)+(h-S)*(h-S));if(l<y[a].width/2+v[f].width/2){var c={};c.username=v[f].userName,c.life=3-v[f].damage,i.emit("playerLife",c),y[a].explode()}}1==e.length&&p(e)}function p(a){angular.isDefined(c)&&(t.cancel(c),c=void 0),e.endGame=!0,e.endGameText=a[0].userName+" is the winner!",i.emit("endGame",a[0].userName)}var m=[{x:10,y:10,rotation:135},{x:90,y:10,rotation:225},{x:90,y:90,rotation:315},{x:10,y:90,rotation:45}];e.PCShow=r.getPCShow,e.endGame=!1;var c,u=document.getElementById("game"),f=u.getContext("2d"),w=new Array,y=new Array,v=new Array,x=new Array;i.on("initGame",function(){var e=o.getPlayers(),a=0;for(var i in e){var r=e[i];w.push(new Spaceship(r.username,m[a].x,m[a].y,r.color,m[a].rotation)),a++}for(var s=0;15>s;s++);c=t(d,10)}),i.on("userleft",function(e){var t=null;for(var a in w)1==n(w[a],e)&&(t=a);w.splice(t,1)}),i.on("updateGameData",function(e){var t=null;for(var a in w)1==n(w[a],e)&&(t=a);null!=t&&w[t].rotateSpaceshipRelative(e.orientation)}),i.on("playerShot",function(t){if(0==e.endGame){var a=null;for(var i in w)1==n(w[i],t)&&(a=i);if(null!=a){var r=w[a],o=(360-(r.rotation+180))/180*Math.PI,s=r.x+u.width/400*Math.sin(o),h=r.y+u.width/400*Math.cos(o);y.push(new Bullet(s,h,r.rotation,r.color,r.userName));var d="../../assets/Bonus/sfx_laser2.ogg";a%2==0&&(d="../../assets/Bonus/sfx_laser1.ogg");var l=new Audio(d);l.play()}}});var M=Math.floor(500*Math.random()+500);e.restartGame=function(){e.endGame=!1;var a=0;for(var r in w)w[r].reset(m[a].x,m[a].y,m[a].rotation),a++;v=[];for(var o=0;15>o;o++)v.push(new Asteroid(s(),h(),Math.floor(361*Math.random()),Math.ceil(18*Math.random())));y=[],x=[],M=Math.floor(500*Math.random()+500),f.clearRect(0,0,u.width,u.height),i.emit("restartGame",null),c=t(d,10)}};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",e])}(),function(){var e=function(e){function t(t,a,i){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,angular.element(e).bind("resize",function(){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,t.$digest()})}return{restrict:"E",link:t,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",e])}(),function(){var e=function(){var e=!0,t=!1;return{getLCShow:function(){return e},setLCShow:function(t){e=t},getPCShow:function(){return t},setPCShow:function(e){t=e}}};angular.module("app").factory("displayService",[e])}(),function(){var e=function(){var e=[];return{getPlayers:function(){return e},setPlayers:function(t){e=t}}};angular.module("app").factory("playerService",[e])}();var Asteroid=function(e,t,a,i){this.x=e,this.y=t,this.width=0,this.height=0,this.rotation=a,this.stage=i,this.image=new Image,this.image.src="../assets/PNG/Meteors/meteor_"+i+".png",this.speed=1};Asteroid.prototype.setImage=function(e){this.stage=e,this.image.src="../assets/PNG/Meteors/meteor_"+e+".png"};var Bullet=function(e,t,a,i,r){this.x=e,this.y=t,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=r,this.explosionImage=new Image,this.explodeStage=0,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"};Bullet.prototype.explode=function(){if(this.explodeStage<4){this.explodeStage++;var e;e=this.explodeStage<3?1:2,this.explosionImage.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"Explode"+e+".png"}else this.explosionImage.src=""};var Powerup=function(e,t,a,i){this.x=e,this.y=t,this.width=0,this.height=0,this.type=a,this.duration=1e3;var r;switch(this.image=new Image,a){case 1:r="bolt_";break;case 2:r="shield_";break;case 3:r="star_"}switch(i){case 0:r+="gold.png";break;case 1:r+="silver.png"}this.image.src="../assets/PNG/Power-ups/"+r};Powerup.prototype.decreaseDuration=function(){this.duration>0&&this.duration--};var Spaceship=function(e,t,a,i,r){this.userName=e,this.x=t,this.y=a,this.speed=1,this.color=i,this.rotation=r,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.powerups=[],this.shield=!1,this.dead=!1,this.shieldImage=new Image,this.shieldImage.src="../assets/PNG/Effects/shield1.png",this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.explodeStage=-1};Spaceship.prototype.reset=function(e,t,a){this.speed=1,this.damage=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.x=e,this.y=t,this.rotation=a,this.shield=!1},Spaceship.prototype.moveSpaceship=function(e,t){this.x=e,this.y=t},Spaceship.prototype.moveSpaceshipRelative=function(e,t){this.x=this.x+e,this.y=this.y+t},Spaceship.prototype.rotateSpaceship=function(e){this.rotation=e},Spaceship.prototype.rotateSpaceshipRelative=function(e){e>80?e=80:-80>e&&(e=-80),this.rotation=this.rotation+e/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0?this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png":4==this.damage&&(this.dead=!0,this.damageImage.src="../assets/PNG/Damage/explode.gif")},Spaceship.prototype.dead=function(){this.dead=!0,this.damage=4,this.damageImage.src="../assets/PNG/Damage/explode.gif"},Spaceship.prototype.explode=function(){this.explodeStage<=14&&(this.explodeStage++,this.image="",this.damageImage.src="../assets/PNG/Damage/frame"+this.explodeStage+".gif")},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},Spaceship.prototype.addPowerup=function(e){switch(e.type){case 1:this.speed++;break;case 2:this.shield=!0;break;case 3:this.damage=0,this.damageImage.src=""}this.powerups.push(e)},function(){var e=function(e){"use strict";var t=io.connect(window.location.host),a=function(a,i){t.on(a,function(){var a=arguments;e.$apply(function(){i.apply(t,a)})})},i=function(a,i,r){t.emit(a,i,function(){var a=arguments;e.$apply(function(){r&&r.apply(t,a)})})};return{on:a,emit:i,socket:t}};angular.module("app").factory("socketService",["$rootScope",e])}();
//# sourceMappingURL=data:application/json;base64,
