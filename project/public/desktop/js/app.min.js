!function(){angular.module("app",[])}(),function(){var e=function(e,t,a,i){e.LCShow=a.getLCShow;var o=function(){t.emit("pcconnect",null)};e.room="",t.on("requestRoom",function(t){e.room=t}),t.on("deviceOrientation",function(e){var t=(e.username,{});t.gamma=e.gamma,t.beta=e.beta,t.alpha=e.alpha}),e.usernames={},e.checkUserCount=!1,t.on("updateusers",function(t){i.setPlayers(t),e.usernames=t,e.checkUserCount=Object.keys(e.usernames).length<0}),e.startGame=function(){t.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){o()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",e])}(),function(){"use strict";var e=function(e,t,a,i,o,r){function s(e,t){return t.username==e.userName}function h(){u.length>0&&(u[0].speed=0),0==v?(v=Math.floor(500*Math.random()+500),y.push(new Powerup(Math.floor(100*Math.random()),Math.floor(100*Math.random()),Math.ceil(3*Math.random()),Math.floor(2*Math.random())))):v--,m.clearRect(0,0,c.width,c.height);var e=c.width/100;if(0!=y.length)for(var t in y){var a=y[t];a.width=c.width/50,a.height=a.width*a.image.height/a.image.width,m.save(),m.translate(a.x*e,a.y*e),m.drawImage(a.image,-a.width/2,-a.height/2,a.width,a.height),m.restore(),a.decreaseDuration(),0==a.duration&&y.splice(t,1)}if(0!=f.length){var i=c.width/100,o=i*f[0].image.height/f[0].image.width;for(var r in f){var s=f[r];s.width=i,s.height=o,0==s.explodeStage?(m.save(),m.translate(s.x*e,s.y*e),m.rotate(s.rotation/180*Math.PI),m.drawImage(s.image,-i/2,-o/2,i,o),m.restore(),f[r].x=Math.cos((s.rotation-90)/180*Math.PI)+s.x,f[r].y=Math.sin((s.rotation-90)/180*Math.PI)+s.y):s.explodeStage<4&&(m.save(),m.translate(s.x*e,s.y*e),m.drawImage(s.explosionImage,-i,-i,2*i,2*i),m.restore())}}if(0!=u.length){var h=c.width/20,p=h*u[0].image.height/u[0].image.width;for(var l in u){var a=u[l];if(a.width=h,a.height=p,m.save(),m.translate(a.x*e,a.y*e),-1==a.explodeStage?(m.rotate(a.rotation/180*Math.PI),m.drawImage(a.image,-h/2,-p/2,h,p)):u[l].explode(),a.damage>0&&a.explodeStage<=140&&m.drawImage(a.damageImage,-h/2,-p/2,h,p),a.damage<4&&(u[l].x=Math.cos((a.rotation-90)/180*Math.PI)/10*a.speed+a.x,u[l].y=Math.sin((a.rotation-90)/180*Math.PI)/10*a.speed+a.y),a.shield&&-1==a.explodeStage){var g=1.5*h,x=g/a.shieldImage.width*a.shieldImage.height;m.drawImage(a.shieldImage,-g/2,-x/2,g,x)}u[l].checkPowerup(),m.restore()}}if(w.length>0)for(var M in w){var S=w[M];if(S.width=c.width/700*S.image.width,S.height=S.width*S.image.height/S.image.width,m.save(),m.translate(S.x*e,S.y*e),m.rotate(S.rotation/180*Math.PI),m.drawImage(S.image,-S.width/2,-S.height/2,S.width,S.height),m.restore(),S.x<-5||S.x>105||S.y<-5||S.y>105){var I=Math.random();.25>I?(w[M].x=-4,w[M].y=Math.floor(100*Math.random()),w[M].rotation=Math.floor(180*Math.random())):.5>I?(w[M].x=Math.floor(100*Math.random()),w[M].y=-4,w[M].rotation=Math.floor(180*Math.random())+90):.75>I?(w[M].x=104,w[M].y=Math.floor(100*Math.random()),w[M].rotation=Math.floor(180*Math.random())+180):(w[M].x=Math.floor(100*Math.random()),w[M].y=104,w[M].rotation=Math.floor(180*Math.random())+270),w[M].speed=1,w[M].setImage(Math.ceil(18*Math.random()))}else w[M].x=Math.cos((S.rotation-90)/180*Math.PI)/30*w[M].speed+S.x,w[M].y=Math.sin((S.rotation-90)/180*Math.PI)/30*w[M].speed+S.y}n(),d()}function n(){for(var e in f)f[e].x<0||f[e].x>c.width||f[e].y<0||f[e].y>c.height?f.splice(e,1):f[e].explodeStage>0&&(f[e].explodeStage<4?f[e].explode():f.splice(e,1))}function d(){var e=[];for(var t in u)if(u[t].damage<4){e.push(u[t]);for(var a in f)if(0==f[a].explodeStage&&f[a].player!=u[t].userName){var o=Math.sqrt(2)/2*(f[a].height/2-f[a].width/2),r=(360-f[a].rotation)/180*Math.PI,s=f[a].x*c.width/100-o*Math.sin(r),h=f[a].y*c.width/100-o*Math.cos(r),n=u[t].x*c.width/100,d=u[t].y*c.width/100,l=Math.sqrt((s-n)*(s-n)+(h-d)*(h-d)),g=1;if(u[t].shield&&(g=1.5),l<f[a].width/2+u[t].width/2*g){var m=new Audio("../../assets/Bonus/sfx_lose.ogg");if(m.play(),!u[t].shield){u[t].increaseDamage();var v={};v.username=u[t].userName,v.life=3-u[t].damage,i.emit("playerLife",v)}f[a].explode()}}for(var x in w){var M=w[x].x*c.width/100,S=w[x].y*c.width/100,n=u[t].x*c.width/100,d=u[t].y*c.width/100,l=Math.sqrt((M-n)*(M-n)+(S-d)*(S-d)),g=1;if(u[t].shield&&(g=1.5),l<w[x].width/2+u[t].width/2*g){var m=new Audio("../../assets/Bonus/sfx_lose.ogg");if(m.play(),u[t].shield)w[x].rotation=w[x].rotation+180,w[x].speed=3,w[x].x=Math.cos((w[x].rotation-90)/180*Math.PI)/30*w[x].speed+w[x].x,w[x].y=Math.sin((w[x].rotation-90)/180*Math.PI)/30*w[x].speed+w[x].y;else{u[t].dead();var v={};v.username=u[t].userName,v.life=3-u[t].damage,i.emit("playerLife",v)}}}for(var x in u)if(4!=u[x].damage&&x!=t){var I=u[x].x*c.width/100,P=u[x].y*c.width/100,n=u[t].x*c.width/100,d=u[t].y*c.width/100,g=1;u[t].shield&&(g=1.5);var N=1;u[x].shield&&(N=1.5);var l=Math.sqrt((I-n)*(I-n)+(P-d)*(P-d));if(l<u[x].width/2*N+u[t].width/2*g){var m=new Audio("../../assets/Bonus/sfx_lose.ogg");m.play(),u[t].dead(),u[x].dead();var v={};v.username=u[t].userName,v.life=3-u[t].damage,i.emit("playerLife",v),v.username=u[x].userName,v.life=3-u[x].damage,i.emit("playerLife",v)}}if(u[t].x*c.width/100<u[t].height/2||u[t].x*c.width/100>c.width-u[t].height/2||u[t].y*c.width/100<u[t].height/2||u[t].y*c.width/100>c.width-u[t].height/2){var m=new Audio("../../assets/Bonus/sfx_lose.ogg");m.play(),u[t].dead();var v={};v.username=u[t].userName,v.life=3-u[t].damage,i.emit("playerLife",v)}for(var x in y){var G=y[x].x*c.width/100,C=y[x].y*c.width/100,n=u[t].x*c.width/100,d=u[t].y*c.width/100,l=Math.sqrt((G-n)*(G-n)+(C-d)*(C-d));if(l<y[x].width/2+u[t].width/2){var k=new Audio("../../assets/Bonus/sfx_zap.ogg");if(k.play(),1==y[x].boolSelf)for(var _ in u)_!=t&&u[_].addPowerup(y[x]);else u[t].addPowerup(y[x]);if(3==y[x].type){var v={};v.username=u[t].userName,v.life=3,i.emit("playerLife",v)}y.splice(x,1)}}}for(var x in w)for(var a in f)if(0==f[a].explodeStage&&f[a].player!=w[x].userName){var o=Math.sqrt(2)/2*(f[a].height/2-f[a].width/2),r=(360-f[a].rotation)/180*Math.PI,s=f[a].x*c.width/100-o*Math.sin(r),h=f[a].y*c.width/100-o*Math.cos(r),M=w[x].x*c.width/100,S=w[x].y*c.width/100,l=Math.sqrt((s-M)*(s-M)+(h-S)*(h-S));if(l<f[a].width/2+w[x].width/2){var v={};v.username=w[x].userName,v.life=3-w[x].damage,i.emit("playerLife",v),f[a].explode()}}1==e.length&&p(e)}function p(a){angular.isDefined(g)&&(t.cancel(g),g=void 0),e.endGame=!0,e.endGameText=a[0].userName+" is the winner!",i.emit("endGame",a[0].userName)}var l=[{x:10,y:10,rotation:135},{x:90,y:10,rotation:225},{x:90,y:90,rotation:315},{x:10,y:90,rotation:45}];e.PCShow=o.getPCShow,e.endGame=!1;var g,c=document.getElementById("game"),m=c.getContext("2d"),u=new Array,f=new Array,w=new Array,y=new Array;i.on("initGame",function(){var e=r.getPlayers(),a=0;for(var i in e){var o=e[i];u.push(new Spaceship(o.username,l[a].x,l[a].y,o.color,l[a].rotation)),a++}for(var s=0;15>s;s++);g=t(h,10)}),i.on("userleft",function(e){var t=null;for(var a in u)1==s(u[a],e)&&(t=a);u.splice(t,1)}),i.on("updateGameData",function(e){var t=null;for(var a in u)1==s(u[a],e)&&(t=a);null!=t&&u[t].rotateSpaceshipRelative(e.orientation)}),i.on("playerShot",function(t){if(0==e.endGame){var a=null;for(var i in u)1==s(u[i],t)&&(a=i);if(null!=a){var o=u[a],r=(360-(o.rotation+180))/180*Math.PI,h=o.x+c.width/400*Math.sin(r),n=o.y+c.width/400*Math.cos(r);f.push(new Bullet(h,n,o.rotation,o.color,o.userName));var d="../../assets/Bonus/sfx_laser2.ogg";a%2==0&&(d="../../assets/Bonus/sfx_laser1.ogg");var p=new Audio(d);p.play()}}});var v=Math.floor(500*Math.random()+500);e.restartGame=function(){e.endGame=!1;var a=0;for(var o in u)u[o].reset(l[a].x,l[a].y,l[a].rotation),a++;w=[];for(var r=0;15>r;r++);f=[],y=[],v=Math.floor(500*Math.random()+500),m.clearRect(0,0,c.width,c.height),i.emit("restartGame",null),g=t(h,10)}};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",e])}(),function(){var e=function(e){function t(t,a,i){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,angular.element(e).bind("resize",function(){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,t.$digest()})}return{restrict:"E",link:t,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",e])}(),function(){var e=function(){var e=!0,t=!1;return{getLCShow:function(){return e},setLCShow:function(t){e=t},getPCShow:function(){return t},setPCShow:function(e){t=e}}};angular.module("app").factory("displayService",[e])}(),function(){var e=function(){var e=[];return{getPlayers:function(){return e},setPlayers:function(t){e=t}}};angular.module("app").factory("playerService",[e])}();var Asteroid=function(e,t,a,i){this.x=e,this.y=t,this.width=0,this.height=0,this.rotation=a,this.stage=i,this.image=new Image,this.image.src="../assets/PNG/Meteors/meteor_"+i+".png",this.speed=1};Asteroid.prototype.setImage=function(e){this.stage=e,this.image.src="../assets/PNG/Meteors/meteor_"+e+".png"};var Bullet=function(e,t,a,i,o){this.x=e,this.y=t,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=o,this.explosionImage=new Image,this.explodeStage=0,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"};Bullet.prototype.explode=function(){if(this.explodeStage<4){this.explodeStage++;var e;e=this.explodeStage<3?1:2,this.explosionImage.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"Explode"+e+".png"}else this.explosionImage.src=""};var Powerup=function(e,t,a,i){this.x=e,this.y=t,this.width=0,this.height=0,this.type=a,this.duration=1e3,this.playerduration=1e3;var o;switch(this.image=new Image,this.boolSelf=i,a){case 1:o="bolt_";break;case 2:o="shield_";break;case 3:o="star_"}switch(i){case 0:o+="gold.png";break;case 1:o+="silver.png"}this.image.src="../assets/PNG/Power-ups/"+o};Powerup.prototype.decreaseDuration=function(){this.duration>0&&this.duration--};var Spaceship=function(e,t,a,i,o){this.userName=e,this.x=t,this.y=a,this.speed=1,this.color=i,this.rotation=o,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.powerups=[],this.shield=!1,this.shieldImage=new Image,this.shieldImage.src="../assets/PNG/Effects/shield1.png",this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.explodeStage=-1};Spaceship.prototype.reset=function(e,t,a){this.speed=1,this.damage=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.x=e,this.y=t,this.rotation=a,this.shield=!1,this.explodeStage=-1},Spaceship.prototype.moveSpaceship=function(e,t){this.x=e,this.y=t},Spaceship.prototype.moveSpaceshipRelative=function(e,t){this.x=this.x+e,this.y=this.y+t},Spaceship.prototype.rotateSpaceship=function(e){this.rotation=e},Spaceship.prototype.rotateSpaceshipRelative=function(e){e>80?e=80:-80>e&&(e=-80),this.rotation=this.rotation+e/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0?this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png":4==this.damage&&this.explode()},Spaceship.prototype.dead=function(){this.damage=4,this.explode()},Spaceship.prototype.explode=function(){this.explodeStage<=140&&(this.explodeStage++,this.damageImage.src="../assets/PNG/Damage/frame"+Math.floor(this.explodeStage/10)+".gif")},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},Spaceship.prototype.addPowerup=function(e){switch(e.type){case 1:this.speed++,this.powerups.push(e);break;case 2:this.shield=!0,this.powerups.push(e);break;case 3:this.damage=0,this.damageImage.src=""}},Spaceship.prototype.checkPowerup=function(){for(var e in this.powerups)if(this.powerups[e].playerduration>0)this.powerups[e].playerduration--;else{switch(this.powerups[e].type){case 1:this.speed--;break;case 2:this.shield=!1}console.log(this.powerups),this.powerups.splice(e,1),console.log(this.powerups)}},function(){var e=function(e){"use strict";var t=io.connect(window.location.host),a=function(a,i){t.on(a,function(){var a=arguments;e.$apply(function(){i.apply(t,a)})})},i=function(a,i,o){t.emit(a,i,function(){var a=arguments;e.$apply(function(){o&&o.apply(t,a)})})};return{on:a,emit:i,socket:t}};angular.module("app").factory("socketService",["$rootScope",e])}();
//# sourceMappingURL=data:application/json;base64,
