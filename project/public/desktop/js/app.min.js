!function(){angular.module("app",[])}(),function(){var e=function(e,t,a,i){e.LCShow=a.getLCShow;var o=function(){t.emit("pcconnect",null)};e.room="",t.on("requestRoom",function(t){e.room=t}),t.on("deviceOrientation",function(e){var t=(e.username,{});t.gamma=e.gamma,t.beta=e.beta,t.alpha=e.alpha}),e.usernames={},e.checkUserCount=!1,t.on("updateusers",function(t){i.setPlayers(t),e.usernames=t,e.checkUserCount=Object.keys(e.usernames).length<0}),e.startGame=function(){t.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){o()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",e])}(),function(){"use strict";var e=function(e,t,a,i,o,r){function s(){var e=Math.floor(100*Math.random());for(var t in w)if(Math.abs(w[t].x-e)<10)return s();return e}function h(){var e=Math.floor(100*Math.random());for(var t in w)if(Math.abs(w[t].y-e)<10)return h();return e}function n(e,t){return t.username==e.userName}function d(){w.length>0&&(w[0].speed=0),0==M?(M=Math.floor(500*Math.random()+500),x.push(new Powerup(Math.floor(100*Math.random()),Math.floor(100*Math.random()),Math.ceil(3*Math.random()),Math.floor(2*Math.random())))):M--,f.clearRect(0,0,u.width,u.height);var e=u.width/100;if(0!=x.length)for(var t in x){var a=x[t];a.width=u.width/50,a.height=a.width*a.image.height/a.image.width,f.save(),f.translate(a.x*e,a.y*e),f.drawImage(a.image,-a.width/2,-a.height/2,a.width,a.height),f.restore(),a.decreaseDuration(),0==a.duration&&x.splice(t,1)}if(0!=y.length){var i=u.width/100,o=i*y[0].image.height/y[0].image.width;for(var r in y){var s=y[r];s.width=i,s.height=o,0==s.explodeStage?(f.save(),f.translate(s.x*e,s.y*e),f.rotate(s.rotation/180*Math.PI),f.drawImage(s.image,-i/2,-o/2,i,o),f.restore(),y[r].x=Math.cos((s.rotation-90)/180*Math.PI)+s.x,y[r].y=Math.sin((s.rotation-90)/180*Math.PI)+s.y):s.explodeStage<4&&(f.save(),f.translate(s.x*e,s.y*e),f.drawImage(s.explosionImage,-i,-i,2*i,2*i),f.restore())}}if(0!=w.length){var h=u.width/20,n=h*w[0].image.height/w[0].image.width;for(var d in w){var a=w[d];if(a.width=h,a.height=n,f.save(),f.translate(a.x*e,a.y*e),-1==a.explodeStage?(f.rotate(a.rotation/180*Math.PI),f.drawImage(a.image,-h/2,-n/2,h,n)):w[d].explode(),a.damage>0&&a.explodeStage<=140&&f.drawImage(a.damageImage,-h/2,-n/2,h,n),a.damage<4&&(w[d].x=Math.cos((a.rotation-90)/180*Math.PI)/10*a.speed+a.x,w[d].y=Math.sin((a.rotation-90)/180*Math.PI)/10*a.speed+a.y),a.shield&&-1==a.explodeStage){var g=1.5*h,c=g/a.shieldImage.width*a.shieldImage.height;f.drawImage(a.shieldImage,-g/2,-c/2,g,c)}w[d].checkPowerup(),f.restore()}}if(v.length>0)for(var m in v){var S=v[m];if(S.width=u.width/700*S.image.width,S.height=S.width*S.image.height/S.image.width,f.save(),f.translate(S.x*e,S.y*e),f.rotate(S.rotation/180*Math.PI),f.drawImage(S.image,-S.width/2,-S.height/2,S.width,S.height),f.restore(),S.x<-5||S.x>105||S.y<-5||S.y>105){var I=Math.random();.25>I?(v[m].x=-4,v[m].y=Math.floor(100*Math.random()),v[m].rotation=Math.floor(180*Math.random())):.5>I?(v[m].x=Math.floor(100*Math.random()),v[m].y=-4,v[m].rotation=Math.floor(180*Math.random())+90):.75>I?(v[m].x=104,v[m].y=Math.floor(100*Math.random()),v[m].rotation=Math.floor(180*Math.random())+180):(v[m].x=Math.floor(100*Math.random()),v[m].y=104,v[m].rotation=Math.floor(180*Math.random())+270),v[m].speed=1,v[m].setImage(Math.ceil(18*Math.random()))}else v[m].x=Math.cos((S.rotation-90)/180*Math.PI)/30*v[m].speed+S.x,v[m].y=Math.sin((S.rotation-90)/180*Math.PI)/30*v[m].speed+S.y}l(),p()}function l(){for(var e in y)y[e].x<0||y[e].x>u.width||y[e].y<0||y[e].y>u.height?y.splice(e,1):y[e].explodeStage>0&&(y[e].explodeStage<4?y[e].explode():y.splice(e,1))}function p(){var e=[];for(var t in w)if(w[t].damage<4){e.push(w[t]);for(var a in y)if(0==y[a].explodeStage&&y[a].player!=w[t].userName){var o=Math.sqrt(2)/2*(y[a].height/2-y[a].width/2),r=(360-y[a].rotation)/180*Math.PI,s=y[a].x*u.width/100-o*Math.sin(r),h=y[a].y*u.width/100-o*Math.cos(r),n=w[t].x*u.width/100,d=w[t].y*u.width/100,l=Math.sqrt((s-n)*(s-n)+(h-d)*(h-d)),p=1;if(w[t].shield&&(p=1.5),l<y[a].width/2+w[t].width/2*p){var c=new Audio("../../assets/Bonus/sfx_lose.ogg");if(c.play(),!w[t].shield){w[t].increaseDamage();var m={};m.username=w[t].userName,m.life=3-w[t].damage,i.emit("playerLife",m)}y[a].explode()}}for(var f in v){var M=v[f].x*u.width/100,S=v[f].y*u.width/100,n=w[t].x*u.width/100,d=w[t].y*u.width/100,l=Math.sqrt((M-n)*(M-n)+(S-d)*(S-d)),p=1;if(w[t].shield&&(p=1.5),l<v[f].width/2+w[t].width/2*p){if(0==v[f].box){v[f].box=!0;var c=new Audio("../../assets/Bonus/sfx_lose.ogg");if(c.play(),w[t].shield){var r=Math.atan((v[f].y-w[t].y)/(v[f].x-w[t].x));v[f].rotation=r,v[f].speed=6*w[t].speed}else{w[t].dead();var m={};m.username=w[t].userName,m.life=3-w[t].damage,i.emit("playerLife",m)}}}else l>v[f].width/2+w[t].width/2*p+100&&(v[f].box=!1)}for(var f in w)if(4!=w[f].damage&&f!=t){var I=w[f].x*u.width/100,P=w[f].y*u.width/100,n=w[t].x*u.width/100,d=w[t].y*u.width/100,p=1;w[t].shield&&(p=1.5);var N=1;w[f].shield&&(N=1.5);var l=Math.sqrt((I-n)*(I-n)+(P-d)*(P-d));if(l<w[f].width/2*N+w[t].width/2*p){var c=new Audio("../../assets/Bonus/sfx_lose.ogg");c.play(),w[t].dead(),w[f].dead();var m={};m.username=w[t].userName,m.life=3-w[t].damage,i.emit("playerLife",m),m.username=w[f].userName,m.life=3-w[f].damage,i.emit("playerLife",m)}}if(w[t].x*u.width/100<w[t].height/2||w[t].x*u.width/100>u.width-w[t].height/2||w[t].y*u.width/100<w[t].height/2||w[t].y*u.width/100>u.width-w[t].height/2){var c=new Audio("../../assets/Bonus/sfx_lose.ogg");c.play(),w[t].dead();var m={};m.username=w[t].userName,m.life=3-w[t].damage,i.emit("playerLife",m)}for(var f in x){var G=x[f].x*u.width/100,b=x[f].y*u.width/100,n=w[t].x*u.width/100,d=w[t].y*u.width/100,l=Math.sqrt((G-n)*(G-n)+(b-d)*(b-d));if(l<x[f].width/2+w[t].width/2){var A=new Audio("../../assets/Bonus/sfx_zap.ogg");if(A.play(),1==x[f].boolSelf)for(var C in w)C!=t&&w[C].addPowerup(x[f]);else w[t].addPowerup(x[f]);if(3==x[f].type){var m={};m.username=w[t].userName,m.life=3,i.emit("playerLife",m)}x.splice(f,1)}}}for(var f in v)for(var a in y)if(0==y[a].explodeStage&&y[a].player!=v[f].userName){var o=Math.sqrt(2)/2*(y[a].height/2-y[a].width/2),r=(360-y[a].rotation)/180*Math.PI,s=y[a].x*u.width/100-o*Math.sin(r),h=y[a].y*u.width/100-o*Math.cos(r),M=v[f].x*u.width/100,S=v[f].y*u.width/100,l=Math.sqrt((s-M)*(s-M)+(h-S)*(h-S));if(l<y[a].width/2+v[f].width/2){var m={};m.username=v[f].userName,m.life=3-v[f].damage,i.emit("playerLife",m),y[a].explode()}}1==e.length&&g(e)}function g(a){angular.isDefined(m)&&(t.cancel(m),m=void 0),e.endGame=!0,e.endGameText=a[0].userName+" is the winner!",i.emit("endGame",a[0].userName)}var c=[{x:10,y:10,rotation:135},{x:90,y:10,rotation:225},{x:90,y:90,rotation:315},{x:10,y:90,rotation:45}];e.PCShow=o.getPCShow,e.endGame=!1;var m,u=document.getElementById("game"),f=u.getContext("2d"),w=new Array,y=new Array,v=new Array,x=new Array;i.on("initGame",function(){var e=r.getPlayers(),a=0;for(var i in e){var o=e[i];w.push(new Spaceship(o.username,c[a].x,c[a].y,o.color,c[a].rotation)),a++}for(var n=0;15>n;n++)v.push(new Asteroid(s(),h(),Math.floor(361*Math.random()),Math.ceil(18*Math.random())));m=t(d,10)}),i.on("userleft",function(e){var t=null;for(var a in w)1==n(w[a],e)&&(t=a);w.splice(t,1)}),i.on("updateGameData",function(e){var t=null;for(var a in w)1==n(w[a],e)&&(t=a);null!=t&&w[t].rotateSpaceshipRelative(e.orientation)}),i.on("playerShot",function(t){if(0==e.endGame){var a=null;for(var i in w)1==n(w[i],t)&&(a=i);if(null!=a){var o=w[a],r=(360-(o.rotation+180))/180*Math.PI,s=o.x+u.width/400*Math.sin(r),h=o.y+u.width/400*Math.cos(r);y.push(new Bullet(s,h,o.rotation,o.color,o.userName));var d="../../assets/Bonus/sfx_laser2.ogg";a%2==0&&(d="../../assets/Bonus/sfx_laser1.ogg");var l=new Audio(d);l.play()}}});var M=Math.floor(500*Math.random()+500);e.restartGame=function(){e.endGame=!1;var a=0;for(var o in w)w[o].reset(c[a].x,c[a].y,c[a].rotation),a++;v=[];for(var r=0;15>r;r++)v.push(new Asteroid(s(),h(),Math.floor(361*Math.random()),Math.ceil(18*Math.random())));y=[],x=[],M=Math.floor(500*Math.random()+500),f.clearRect(0,0,u.width,u.height),i.emit("restartGame",null),m=t(d,10)}};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",e])}(),function(){var e=function(e){function t(t,a,i){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,angular.element(e).bind("resize",function(){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,t.$digest()})}return{restrict:"E",link:t,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",e])}();var Bullet=function(e,t,a,i,o){this.x=e,this.y=t,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=o,this.explosionImage=new Image,this.explodeStage=0,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"};Bullet.prototype.explode=function(){if(this.explodeStage<4){this.explodeStage++;var e;e=this.explodeStage<3?1:2,this.explosionImage.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"Explode"+e+".png"}else this.explosionImage.src=""};var Powerup=function(e,t,a,i){this.x=e,this.y=t,this.width=0,this.height=0,this.type=a,this.duration=1e3,this.playerduration=1e3;var o;switch(this.image=new Image,this.boolSelf=i,a){case 1:o="bolt_";break;case 2:o="shield_";break;case 3:o="star_"}switch(i){case 0:o+="gold.png";break;case 1:o+="silver.png"}this.image.src="../assets/PNG/Power-ups/"+o};Powerup.prototype.decreaseDuration=function(){this.duration>0&&this.duration--};var Spaceship=function(e,t,a,i,o){this.userName=e,this.x=t,this.y=a,this.speed=1,this.color=i,this.rotation=o,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.powerups=[],this.shield=!0,this.shieldImage=new Image,this.shieldImage.src="../assets/PNG/Effects/shield1.png",this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.explodeStage=-1};Spaceship.prototype.reset=function(e,t,a){this.speed=1,this.damage=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.x=e,this.y=t,this.rotation=a,this.explodeStage=-1},Spaceship.prototype.moveSpaceship=function(e,t){this.x=e,this.y=t},Spaceship.prototype.moveSpaceshipRelative=function(e,t){this.x=this.x+e,this.y=this.y+t},Spaceship.prototype.rotateSpaceship=function(e){this.rotation=e},Spaceship.prototype.rotateSpaceshipRelative=function(e){e>80?e=80:-80>e&&(e=-80),this.rotation=this.rotation+e/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0?this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png":4==this.damage&&this.explode()},Spaceship.prototype.dead=function(){this.damage=4,this.explode()},Spaceship.prototype.explode=function(){this.explodeStage<=140&&(this.explodeStage++,this.damageImage.src="../assets/PNG/Damage/frame"+Math.floor(this.explodeStage/10)+".gif")},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},Spaceship.prototype.addPowerup=function(e){switch(e.type){case 1:this.speed++,this.powerups.push(e);break;case 2:this.shield=!0,this.powerups.push(e);break;case 3:this.damage=0,this.damageImage.src=""}},Spaceship.prototype.checkPowerup=function(){for(var e in this.powerups)if(this.powerups[e].playerduration>0)this.powerups[e].playerduration--;else{switch(this.powerups[e].type){case 1:this.speed--;break;case 2:this.shield=!1}console.log("-------------"),console.log(this.powerups),this.powerups.splice(e,1),console.log(this.powerups)}};var Asteroid=function(e,t,a,i){this.x=e,this.y=t,this.width=0,this.height=0,this.rotation=a,this.stage=i,this.image=new Image,this.image.src="../assets/PNG/Meteors/meteor_"+i+".png",this.speed=1,this.box=!1};Asteroid.prototype.setImage=function(e){this.stage=e,this.image.src="../assets/PNG/Meteors/meteor_"+e+".png"},function(){var e=function(){var e=!0,t=!1;return{getLCShow:function(){return e},setLCShow:function(t){e=t},getPCShow:function(){return t},setPCShow:function(e){t=e}}};angular.module("app").factory("displayService",[e])}(),function(){var e=function(){var e=[];return{getPlayers:function(){return e},setPlayers:function(t){e=t}}};angular.module("app").factory("playerService",[e])}(),function(){var e=function(e){"use strict";var t=io.connect(window.location.host),a=function(a,i){t.on(a,function(){var a=arguments;e.$apply(function(){i.apply(t,a)})})},i=function(a,i,o){t.emit(a,i,function(){var a=arguments;e.$apply(function(){o&&o.apply(t,a)})})};return{on:a,emit:i,socket:t}};angular.module("app").factory("socketService",["$rootScope",e])}();
//# sourceMappingURL=data:application/json;base64,
