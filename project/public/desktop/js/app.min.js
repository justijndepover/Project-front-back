!function(){angular.module("app",[])}(),function(){var e=function(e){function t(t,a,i){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,angular.element(e).bind("resize",function(){e.innerWidth<e.innerHeight?t.width=e.innerWidth-20:t.width=e.innerHeight-20,t.$digest()})}return{restrict:"E",link:t,replace:!0,template:'<canvas id="game" class="playArea" width="{{width}}" height="{{width}}" />'}};angular.module("app").directive("canvasDirective",["$window",e])}(),function(){var e=function(e,t,a,i){e.LCShow=a.getLCShow;var r=function(){t.emit("pcconnect",null)};e.room="",t.on("requestRoom",function(t){e.room=t}),t.on("deviceOrientation",function(e){var t=(e.username,{});t.gamma=e.gamma,t.beta=e.beta,t.alpha=e.alpha}),e.usernames={},e.checkUserCount=!0,t.on("updateusers",function(t){i.setPlayers(t),e.usernames=t,e.checkUserCount=Object.keys(e.usernames).length<2}),e.startGame=function(){t.emit("startGame",null),a.setLCShow(!1),a.setPCShow(!0)},function(){r()}()};angular.module("app").controller("loginController",["$scope","socketService","displayService","playerService",e])}(),function(){"use strict";var e=function(e,t,a,i,r,o){function s(){var e=Math.floor(100*Math.random());for(var t in w)if(Math.abs(w[t].x-e)<10)return s();return e}function h(){var e=Math.floor(100*Math.random());for(var t in w)if(Math.abs(w[t].y-e)<10)return h();return e}function n(e,t){return t.username===e.userName}function d(){w.length>0,0===M?(M=Math.floor(500*Math.random()+500),x.push(new Powerup(Math.floor(100*Math.random()),Math.floor(100*Math.random()),Math.ceil(3*Math.random()),Math.floor(2*Math.random())))):M--,f.clearRect(0,0,u.width,u.height);var e=u.width/100;if(0!==x.length)for(var t in x){var a=x[t];a.width=u.width/50,a.height=a.width*a.image.height/a.image.width,f.save(),f.translate(a.x*e,a.y*e),f.drawImage(a.image,-a.width/2,-a.height/2,a.width,a.height),f.restore(),a.decreaseDuration(),0===a.duration&&x.splice(t,1)}if(0!==y.length){var i=u.width/100,r=i*y[0].image.height/y[0].image.width;for(var o in y){var s=y[o];s.width=i,s.height=r,0===s.explodeStage?(f.save(),f.translate(s.x*e,s.y*e),f.rotate(s.rotation/180*Math.PI),f.drawImage(s.image,-i/2,-r/2,i,r),f.restore(),y[o].x=Math.cos((s.rotation-90)/180*Math.PI)+s.x,y[o].y=Math.sin((s.rotation-90)/180*Math.PI)+s.y):s.explodeStage<4&&(f.save(),f.translate(s.x*e,s.y*e),f.drawImage(s.explosionImage,-i,-i,2*i,2*i),f.restore())}}if(0!==w.length){var h=u.width/20,n=h*w[0].image.height/w[0].image.width;for(var d in w){var c=w[d];if(c.width=h,c.height=n,f.save(),f.translate(c.x*e,c.y*e),-1===c.explodeStage?(f.rotate(c.rotation/180*Math.PI),f.drawImage(c.image,-h/2,-n/2,h,n)):w[d].explode(),c.damage>0&&c.explodeStage<=140&&f.drawImage(c.damageImage,-h/2,-n/2,h,n),c.damage<4&&(w[d].x=Math.cos((c.rotation-90)/180*Math.PI)/10*c.speed+c.x,w[d].y=Math.sin((c.rotation-90)/180*Math.PI)/10*c.speed+c.y),c.shield&&-1===c.explodeStage){var m=1.5*h,g=m/c.shieldImage.width*c.shieldImage.height;f.drawImage(c.shieldImage,-m/2,-g/2,m,g)}w[d].checkPowerup(),f.restore()}}if(v.length>0)for(var S in v){var I=v[S];if(I.width=u.width/700*I.image.width,I.height=I.width*I.image.height/I.image.width,f.save(),f.translate(I.x*e,I.y*e),f.rotate(I.rotation/180*Math.PI),f.drawImage(I.image,-I.width/2,-I.height/2,I.width,I.height),f.restore(),I.x<-5||I.x>105||I.y<-5||I.y>105){var P=Math.random();.25>P?(v[S].x=-4,v[S].y=Math.floor(100*Math.random()),v[S].rotation=Math.floor(180*Math.random())):.5>P?(v[S].x=Math.floor(100*Math.random()),v[S].y=-4,v[S].rotation=Math.floor(180*Math.random())+90):.75>P?(v[S].x=104,v[S].y=Math.floor(100*Math.random()),v[S].rotation=Math.floor(180*Math.random())+180):(v[S].x=Math.floor(100*Math.random()),v[S].y=104,v[S].rotation=Math.floor(180*Math.random())+270),v[S].speed=1,v[S].setImage(Math.ceil(18*Math.random()))}else v[S].x=Math.cos((I.rotation-90)/180*Math.PI)/30*v[S].speed+I.x,v[S].y=Math.sin((I.rotation-90)/180*Math.PI)/30*v[S].speed+I.y}l(),p()}function l(){for(var e in y)y[e].x<0||y[e].x>u.width||y[e].y<0||y[e].y>u.height?y.splice(e,1):y[e].explodeStage>0&&(y[e].explodeStage<4?y[e].explode():y.splice(e,1))}function p(){var e=[];for(var t in w)if(!(w[t].damage>=4)){var a=w[t].x*u.width/100,r=w[t].y*u.width/100,o=1;w[t].shield&&(o=1.5);var s={};for(var h in y)if(0===y[h].explodeStage&&y[h].player!=w[t].userName){var n=Math.sqrt(2)/2*(y[h].height/2-y[h].width/2),d=(360-y[h].rotation)/180*Math.PI,l=y[h].x*u.width/100-n*Math.sin(d),p=y[h].y*u.width/100-n*Math.cos(d),m=Math.sqrt((l-a)*(l-a)+(p-r)*(p-r));m<y[h].width/2+w[t].width/2*o&&(P.currentTime=0,P.play(),w[t].shield||(w[t].increaseDamage(),s={},s.username=w[t].userName,s.life=3-w[t].damage,i.emit("playerLife",s)),y[h].explode())}for(var g in v){var f=v[g].x*u.width/100,M=v[g].y*u.width/100,S=Math.sqrt((f-a)*(f-a)+(M-r)*(M-r));if(S<v[g].width/2+w[t].width/2*o){if(v[g].box===!1)if(v[g].box=!0,P.currentTime=0,P.play(),w[t].shield){var I=-(180*Math.atan2(v[g].y-w[t].y,v[g].x-w[t].x)/Math.PI);I>-90&&0>I||I>90&&180>I?v[g].rotation=180+I:v[g].rotation=I,v[g].speed=6}else w[t].dead(),s={},s.username=w[t].userName,s.life=3-w[t].damage,i.emit("playerLife",s)}else S>v[g].width/2+w[t].width/2*o+100&&(v[g].box=!1)}for(var G in w)if(4!==w[G].damage&&G!=t){var b=w[G].x*u.width/100,C=w[G].y*u.width/100,k=1;w[G].shield&&(k=1.5);var L=Math.sqrt((b-a)*(b-a)+(C-r)*(C-r));L<w[G].width/2*k+w[t].width/2*o&&(P.currentTime=0,P.play(),w[t].dead(),w[G].dead(),s={},s.username=w[t].userName,s.life=3-w[t].damage,i.emit("playerLife",s),s.username=w[G].userName,s.life=3-w[G].damage,i.emit("playerLife",s))}(w[t].x*u.width/100<w[t].height/2||w[t].x*u.width/100>u.width-w[t].height/2||w[t].y*u.width/100<w[t].height/2||w[t].y*u.width/100>u.width-w[t].height/2)&&(P.currentTime=0,P.play(),w[t].dead(),s={},s.username=w[t].userName,s.life=3-w[t].damage,i.emit("playerLife",s));for(var _ in x){var A=x[_].x*u.width/100,D=x[_].y*u.width/100,T=Math.sqrt((A-a)*(A-a)+(D-r)*(D-r));if(T<x[_].width/2+w[t].width/2){if(N.currentTime=0,N.play(),1===x[_].boolSelf)for(var $ in w)$!=t&&w[$].addPowerup(x[_]);else w[t].addPowerup(x[_]);3===x[_].type&&(s={},s.username=w[t].userName,s.life=3,i.emit("playerLife",s)),x.splice(_,1)}}w[t].damage<4&&e.push(w[t])}for(var q in v)for(var B in y)if(0===y[B].explodeStage&&y[B].player!=v[q].userName){var R=Math.sqrt(2)/2*(y[B].height/2-y[B].width/2),E=(360-y[B].rotation)/180*Math.PI,H=y[B].x*u.width/100-R*Math.sin(E),U=y[B].y*u.width/100-R*Math.cos(E),W=v[q].x*u.width/100,z=v[q].y*u.width/100,O=Math.sqrt((H-W)*(H-W)+(U-z)*(U-z));O<y[B].width/2+v[q].width/2&&(i.emit("playerLife",{username:v[q].userName,damage:3-v[q].damage}),y[B].explode())}e.length<=1&&c(e)}function c(a){angular.isDefined(g)&&(t.cancel(g),g=void 0),e.endGame=!0,1===a.length?(e.endGameText=a[0].userName+" is the winner!",i.emit("endGame",a[0].userName)):e.endGameText="No winners"}var m=[{x:10,y:10,rotation:135},{x:90,y:10,rotation:225},{x:90,y:90,rotation:315},{x:10,y:90,rotation:45}];e.PCShow=r.getPCShow,e.endGame=!1;var g,u=document.getElementById("game"),f=u.getContext("2d"),w=[],y=[],v=[],x=[];i.on("initGame",function(){var e=o.getPlayers(),a=0;for(var i in e){var r=e[i];w.push(new Spaceship(r.username,m[a].x,m[a].y,r.color,m[a].rotation)),a++}for(var n=0;15>n;n++)v.push(new Asteroid(s(),h(),Math.floor(361*Math.random()),Math.ceil(18*Math.random())));g=t(d,10)}),i.on("userleft",function(e){var t=null;for(var a in w)n(w[a],e)===!0&&(t=a);w.splice(t,1)}),i.on("updateGameData",function(e){var t=null;for(var a in w)n(w[a],e)===!0&&(t=a);null!==t&&w[t].rotateSpaceshipRelative(e.orientation)}),i.on("playerShot",function(t){if(e.endGame===!1){var a=null;for(var i in w)n(w[i],t)===!0&&(a=i);if(null!==a){var r=w[a],o=(360-(r.rotation+180))/180*Math.PI,s=r.x+u.width/400*Math.sin(o),h=r.y+u.width/400*Math.cos(o);y.push(new Bullet(s,h,r.rotation,r.color,r.userName)),a%2===0?(S.currentTime=0,S.play()):(I.currentTime=0,I.play())}}});var M=Math.floor(500*Math.random()+500),S=new Audio("../../assets/Bonus/sfx_laser1.ogg"),I=new Audio("../../assets/Bonus/sfx_laser2.ogg"),P=new Audio("../../assets/Bonus/sfx_lose.ogg"),N=new Audio("../../assets/Bonus/sfx_zap.ogg");e.restartGame=function(){e.endGame=!1;var a=0;for(var r in w)w[r].reset(m[a].x,m[a].y,m[a].rotation),a++;v=[];for(var o=0;15>o;o++)v.push(new Asteroid(s(),h(),Math.floor(361*Math.random()),Math.ceil(18*Math.random())));y=[],x=[],M=Math.floor(500*Math.random()+500),f.clearRect(0,0,u.width,u.height),i.emit("restartGame",null),g=t(d,10)}};angular.module("app").controller("playController",["$scope","$interval","$window","socketService","displayService","playerService",e])}();var Asteroid=function(e,t,a,i){this.x=e,this.y=t,this.width=0,this.height=0,this.rotation=a,this.stage=i,this.image=new Image,this.image.src="../assets/PNG/Meteors/meteor_"+i+".png",this.speed=1,this.box=!1};Asteroid.prototype.setImage=function(e){this.stage=e,this.image.src="../assets/PNG/Meteors/meteor_"+e+".png"};var Bullet=function(e,t,a,i,r){this.x=e,this.y=t,this.rotation=a,this.image=new Image,this.color=i,this.width=0,this.height=0,this.player=r,this.explosionImage=new Image,this.explodeStage=0,"orange"==this.color&&(this.color="red"),this.image.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"01.png"};Bullet.prototype.explode=function(){if(this.explodeStage<4){this.explodeStage++;var e;e=this.explodeStage<3?1:2,this.explosionImage.src="../assets/PNG/Lasers/laser"+this.color.charAt(0).toUpperCase()+this.color.slice(1)+"Explode"+e+".png"}else this.explosionImage.src=""};var Powerup=function(e,t,a,i){this.x=e,this.y=t,this.width=0,this.height=0,this.type=a,this.duration=1e3,this.playerduration=1e3;var r;switch(this.image=new Image,this.boolSelf=i,a){case 1:r="bolt_";break;case 2:r="shield_";break;case 3:r="star_"}switch(i){case 0:r+="gold.png";break;case 1:r+="silver.png"}this.image.src="../assets/PNG/Power-ups/"+r};Powerup.prototype.decreaseDuration=function(){this.duration>0&&this.duration--};var Spaceship=function(e,t,a,i,r){this.userName=e,this.x=t,this.y=a,this.speed=1,this.color=i,this.rotation=r,this.image=new Image,this.damage=0,this.width=0,this.height=0,this.powerups=[],this.shield=!1,this.shieldImage=new Image,this.shieldImage.src="../assets/PNG/Effects/shield1.png",this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.explodeStage=-1};Spaceship.prototype.reset=function(e,t,a){this.speed=1,this.damage=0,this.damageImage=new Image,this.image.src="../assets/PNG/playerShip1_"+this.color+".png",this.x=e,this.y=t,this.rotation=a,this.shield=!1,this.explodeStage=-1},Spaceship.prototype.moveSpaceship=function(e,t){this.x=e,this.y=t},Spaceship.prototype.moveSpaceshipRelative=function(e,t){this.x=this.x+e,this.y=this.y+t},Spaceship.prototype.rotateSpaceship=function(e){this.rotation=e},Spaceship.prototype.rotateSpaceshipRelative=function(e){e>80?e=80:-80>e&&(e=-80),this.rotation=this.rotation+e/5,this.rotation<-360&&(this.rotation=this.rotation+720),this.rotation>360&&(this.rotation=this.rotation-720)},Spaceship.prototype.increaseDamage=function(){this.damage<4&&(this.damage+=1),this.damage<=3&&this.damage>0?this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png":4==this.damage&&this.explode()},Spaceship.prototype.dead=function(){this.damage=4,this.explode()},Spaceship.prototype.explode=function(){this.explodeStage<=140&&(this.explodeStage++,this.damageImage.src="../assets/PNG/Damage/frame"+Math.floor(this.explodeStage/10)+".gif")},Spaceship.prototype.decreaseDamage=function(){this.damage>0&&(this.damage-=1),this.damage<=3&&this.damage>0&&(this.damageImage.src="../assets/PNG/Damage/playerShip1_damage"+this.damage+".png")},Spaceship.prototype.addPowerup=function(e){switch(e.type){case 1:this.speed++,this.powerups.push(e);break;case 2:this.shield=!0,this.powerups.push(e);break;case 3:this.damage=0,this.damageImage.src=""}},Spaceship.prototype.checkPowerup=function(){for(var e in this.powerups)if(this.powerups[e].playerduration>0)this.powerups[e].playerduration--;else{switch(this.powerups[e].type){case 1:this.speed--;break;case 2:this.shield=!1}console.log("-------------"),console.log(this.powerups),this.powerups.splice(e,1),console.log(this.powerups)}},function(){var e=function(){var e=!0,t=!1;return{getLCShow:function(){return e},setLCShow:function(t){e=t},getPCShow:function(){return t},setPCShow:function(e){t=e}}};angular.module("app").factory("displayService",[e])}(),function(){var e=function(){var e=[];return{getPlayers:function(){return e},setPlayers:function(t){e=t}}};angular.module("app").factory("playerService",[e])}(),function(){var e=function(e){"use strict";var t=io.connect(window.location.host),a=function(a,i){t.on(a,function(){var a=arguments;e.$apply(function(){i.apply(t,a)})})},i=function(a,i,r){t.emit(a,i,function(){var a=arguments;e.$apply(function(){r&&r.apply(t,a)})})};return{on:a,emit:i,socket:t}};angular.module("app").factory("socketService",["$rootScope",e])}();
//# sourceMappingURL=data:application/json;base64,
